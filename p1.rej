--- TexGen.h
+++ TexGen.h
@@ -48,6 +48,7 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 #include "RectangularVoxelMesh.h"
 #include "ShearedVoxelMesh.h"
 #include "StaggeredVoxelMesh.h"
+#include "OctreeVoxelMesh.h"
 #include "TetgenMesh.h"
 #include "PeriodicBoundaries.h"
 #include "Textile3DWeave.h"
--- Core.i
+++ Core.i
@@ -194,6 +194,7 @@ namespace std
 %include "../Core/ShearedPeriodicBoundaries.h"
 %include "../Core/StaggeredPeriodicBoundaries.h"
 %include "../Core/Materials.h"
+%include "../Core/OctreeVoxelMesh.h"
 
 %include "../Core/PatternDraft.h"
 
--- Core_wrap.cxx
+++ Core_wrap.cxx
@@ -3441,183 +3441,185 @@ namespace Swig {
 #define SWIGTYPE_p_CObjectContainerT_TexGen__CSectionMesh_t swig_types[1]
 #define SWIGTYPE_p_CObjectContainerT_TexGen__CSection_t swig_types[2]
 #define SWIGTYPE_p_CObjectContainerT_TexGen__CYarnSection_t swig_types[3]
-#define SWIGTYPE_p_TexGen__CAdjustMeshInterference swig_types[4]
-#define SWIGTYPE_p_TexGen__CBasicVolumes swig_types[5]
-#define SWIGTYPE_p_TexGen__CDomain swig_types[6]
-#define SWIGTYPE_p_TexGen__CDomainPlanes swig_types[7]
-#define SWIGTYPE_p_TexGen__CFibreDistribution swig_types[8]
-#define SWIGTYPE_p_TexGen__CFibreDistribution1DQuad swig_types[9]
-#define SWIGTYPE_p_TexGen__CFibreDistributionConst swig_types[10]
-#define SWIGTYPE_p_TexGen__CGeometrySolver swig_types[11]
-#define SWIGTYPE_p_TexGen__CInterpolation swig_types[12]
-#define SWIGTYPE_p_TexGen__CInterpolationAdjusted swig_types[13]
-#define SWIGTYPE_p_TexGen__CInterpolationBezier swig_types[14]
-#define SWIGTYPE_p_TexGen__CInterpolationCubic swig_types[15]
-#define SWIGTYPE_p_TexGen__CInterpolationLinear swig_types[16]
-#define SWIGTYPE_p_TexGen__CKeywordMaterial swig_types[17]
-#define SWIGTYPE_p_TexGen__CLinearTransformation swig_types[18]
-#define SWIGTYPE_p_TexGen__CLogger swig_types[19]
-#define SWIGTYPE_p_TexGen__CMaterial swig_types[20]
-#define SWIGTYPE_p_TexGen__CMatrix swig_types[21]
-#define SWIGTYPE_p_TexGen__CMesh swig_types[22]
-#define SWIGTYPE_p_TexGen__CMeshDataBase swig_types[23]
-#define SWIGTYPE_p_TexGen__CMeshDataT_TexGen__XYZ_t swig_types[24]
-#define SWIGTYPE_p_TexGen__CMeshIntersectionData swig_types[25]
-#define SWIGTYPE_p_TexGen__CMesher swig_types[26]
-#define SWIGTYPE_p_TexGen__CMesherBase swig_types[27]
-#define SWIGTYPE_p_TexGen__CNode swig_types[28]
-#define SWIGTYPE_p_TexGen__COLOR swig_types[29]
-#define SWIGTYPE_p_TexGen__CPatternDraft swig_types[30]
-#define SWIGTYPE_p_TexGen__CPeriodicBoundaries swig_types[31]
-#define SWIGTYPE_p_TexGen__CProperties swig_types[32]
-#define SWIGTYPE_p_TexGen__CPropertiesTextile swig_types[33]
-#define SWIGTYPE_p_TexGen__CPropertiesYarn swig_types[34]
-#define SWIGTYPE_p_TexGen__CProperty swig_types[35]
-#define SWIGTYPE_p_TexGen__CRectangularVoxelMesh swig_types[36]
-#define SWIGTYPE_p_TexGen__CSection swig_types[37]
-#define SWIGTYPE_p_TexGen__CSectionBezier swig_types[38]
-#define SWIGTYPE_p_TexGen__CSectionEllipse swig_types[39]
-#define SWIGTYPE_p_TexGen__CSectionHybrid swig_types[40]
-#define SWIGTYPE_p_TexGen__CSectionLenticular swig_types[41]
-#define SWIGTYPE_p_TexGen__CSectionMesh swig_types[42]
-#define SWIGTYPE_p_TexGen__CSectionMeshRectangleSection swig_types[43]
-#define SWIGTYPE_p_TexGen__CSectionMeshRectangular swig_types[44]
-#define SWIGTYPE_p_TexGen__CSectionMeshTriangulate swig_types[45]
-#define SWIGTYPE_p_TexGen__CSectionPolygon swig_types[46]
-#define SWIGTYPE_p_TexGen__CSectionPowerEllipse swig_types[47]
-#define SWIGTYPE_p_TexGen__CSectionRectangle swig_types[48]
-#define SWIGTYPE_p_TexGen__CSectionRotated swig_types[49]
-#define SWIGTYPE_p_TexGen__CSectionScaled swig_types[50]
-#define SWIGTYPE_p_TexGen__CShearedPeriodicBoundaries swig_types[51]
-#define SWIGTYPE_p_TexGen__CShearedTextileWeave2D swig_types[52]
-#define SWIGTYPE_p_TexGen__CShearedVoxelMesh swig_types[53]
-#define SWIGTYPE_p_TexGen__CSimulation swig_types[54]
-#define SWIGTYPE_p_TexGen__CSimulationAbaqus swig_types[55]
-#define SWIGTYPE_p_TexGen__CSingletonT_TexGen__CTexGen_t swig_types[56]
-#define SWIGTYPE_p_TexGen__CSlaveNode swig_types[57]
-#define SWIGTYPE_p_TexGen__CStaggeredPeriodicBoundaries swig_types[58]
-#define SWIGTYPE_p_TexGen__CStaggeredVoxelMesh swig_types[59]
-#define SWIGTYPE_p_TexGen__CTetgenMesh swig_types[60]
-#define SWIGTYPE_p_TexGen__CTexGen swig_types[61]
-#define SWIGTYPE_p_TexGen__CTextile swig_types[62]
-#define SWIGTYPE_p_TexGen__CTextile3DWeave swig_types[63]
-#define SWIGTYPE_p_TexGen__CTextileAngleInterlock swig_types[64]
-#define SWIGTYPE_p_TexGen__CTextileDeformer swig_types[65]
-#define SWIGTYPE_p_TexGen__CTextileDeformerVolumeMesh swig_types[66]
-#define SWIGTYPE_p_TexGen__CTextileLayerToLayer swig_types[67]
-#define SWIGTYPE_p_TexGen__CTextileLayered swig_types[68]
-#define SWIGTYPE_p_TexGen__CTextileMaterials swig_types[69]
-#define SWIGTYPE_p_TexGen__CTextileOffsetAngleInterlock swig_types[70]
-#define SWIGTYPE_p_TexGen__CTextileOrthogonal swig_types[71]
-#define SWIGTYPE_p_TexGen__CTextileWeave swig_types[72]
-#define SWIGTYPE_p_TexGen__CTextileWeave2D swig_types[73]
-#define SWIGTYPE_p_TexGen__CTextileWeave3D swig_types[74]
-#define SWIGTYPE_p_TexGen__CUMAT swig_types[75]
-#define SWIGTYPE_p_TexGen__CVoxelMesh swig_types[76]
-#define SWIGTYPE_p_TexGen__CYarn swig_types[77]
-#define SWIGTYPE_p_TexGen__CYarnSection swig_types[78]
-#define SWIGTYPE_p_TexGen__CYarnSectionConstant swig_types[79]
-#define SWIGTYPE_p_TexGen__CYarnSectionInterp swig_types[80]
-#define SWIGTYPE_p_TexGen__CYarnSectionInterpNode swig_types[81]
-#define SWIGTYPE_p_TexGen__CYarnSectionInterpPosition swig_types[82]
-#define SWIGTYPE_p_TexGen__ELEMENT_INDICES swig_types[83]
-#define SWIGTYPE_p_TexGen__LessPairDoubleInt swig_types[84]
-#define SWIGTYPE_p_TexGen__LessPairDoubleXYZ swig_types[85]
-#define SWIGTYPE_p_TexGen__MESHER_ELEMENT_DATA swig_types[86]
-#define SWIGTYPE_p_TexGen__PLANE swig_types[87]
-#define SWIGTYPE_p_TexGen__PLANEPARAMS swig_types[88]
-#define SWIGTYPE_p_TexGen__POINT_INFO swig_types[89]
-#define SWIGTYPE_p_TexGen__WXYZ swig_types[90]
-#define SWIGTYPE_p_TexGen__XY swig_types[91]
-#define SWIGTYPE_p_TexGen__XYZ swig_types[92]
-#define SWIGTYPE_p_TexGen__YARNDATA swig_types[93]
-#define SWIGTYPE_p_TexGen__YARN_POSITION_INFORMATION swig_types[94]
-#define SWIGTYPE_p_TiXmlElement swig_types[95]
-#define SWIGTYPE_p_allocator_type swig_types[96]
-#define SWIGTYPE_p_bool swig_types[97]
-#define SWIGTYPE_p_char swig_types[98]
-#define SWIGTYPE_p_const_reference swig_types[99]
-#define SWIGTYPE_p_difference_type swig_types[100]
-#define SWIGTYPE_p_double swig_types[101]
-#define SWIGTYPE_p_f_std__string_bool__void swig_types[102]
-#define SWIGTYPE_p_first_type swig_types[103]
-#define SWIGTYPE_p_int swig_types[104]
-#define SWIGTYPE_p_key_type swig_types[105]
-#define SWIGTYPE_p_mapped_type swig_types[106]
-#define SWIGTYPE_p_ostream swig_types[107]
-#define SWIGTYPE_p_p_PyObject swig_types[108]
-#define SWIGTYPE_p_reference swig_types[109]
-#define SWIGTYPE_p_second_type swig_types[110]
-#define SWIGTYPE_p_setT_int_t swig_types[111]
-#define SWIGTYPE_p_size_type swig_types[112]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CLinearTransformation_t swig_types[113]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CMeshDataBase_p_t swig_types[114]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CMesh_t swig_types[115]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CNode_t swig_types[116]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CSlaveNode_t swig_types[117]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CTextile_p_t swig_types[118]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CYarn_p_t swig_types[119]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CYarn_t swig_types[120]
-#define SWIGTYPE_p_std__allocatorT_TexGen__MESHER_ELEMENT_DATA_t swig_types[121]
-#define SWIGTYPE_p_std__allocatorT_TexGen__PLANE_t swig_types[122]
-#define SWIGTYPE_p_std__allocatorT_TexGen__POINT_INFO_t swig_types[123]
-#define SWIGTYPE_p_std__allocatorT_TexGen__XYZ_t swig_types[124]
-#define SWIGTYPE_p_std__allocatorT_TexGen__XY_t swig_types[125]
-#define SWIGTYPE_p_std__allocatorT_bool_t swig_types[126]
-#define SWIGTYPE_p_std__allocatorT_double_t swig_types[127]
-#define SWIGTYPE_p_std__allocatorT_float_t swig_types[128]
-#define SWIGTYPE_p_std__allocatorT_int_t swig_types[129]
-#define SWIGTYPE_p_std__allocatorT_std__pairT_double_TexGen__XYZ_t_t swig_types[130]
-#define SWIGTYPE_p_std__allocatorT_std__pairT_int_int_t_t swig_types[131]
-#define SWIGTYPE_p_std__allocatorT_std__pairT_std__string_const_TexGen__CTextile_p_t_t swig_types[132]
-#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[133]
-#define SWIGTYPE_p_std__invalid_argument swig_types[134]
-#define SWIGTYPE_p_std__istream swig_types[135]
-#define SWIGTYPE_p_std__lessT_std__string_t swig_types[136]
-#define SWIGTYPE_p_std__listT_TexGen__CYarn_std__allocatorT_TexGen__CYarn_t_t swig_types[137]
-#define SWIGTYPE_p_std__listT_TexGen__MESHER_ELEMENT_DATA_std__allocatorT_TexGen__MESHER_ELEMENT_DATA_t_t swig_types[138]
-#define SWIGTYPE_p_std__listT__Tp__Alloc_t swig_types[139]
-#define SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t swig_types[140]
-#define SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t swig_types[141]
-#define SWIGTYPE_p_std__mapT_std__string_TexGen__CTextile_p_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_TexGen__CTextile_p_t_t_t swig_types[142]
-#define SWIGTYPE_p_std__mapT_std__string_std__pairT_CObjectContainerT_TexGen__CMaterial_t_CObjectContainerT_TexGen__CMaterial_t_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__pairT_CObjectContainerT_TexGen__CMaterial_t_CObjectContainerT_TexGen__CMaterial_t_t_t_t_t swig_types[143]
-#define SWIGTYPE_p_std__ostream swig_types[144]
-#define SWIGTYPE_p_std__pairT_TexGen__XYZ_TexGen__XYZ_t swig_types[145]
-#define SWIGTYPE_p_std__pairT_bool_bool_t swig_types[146]
-#define SWIGTYPE_p_std__pairT_double_TexGen__XYZ_t swig_types[147]
-#define SWIGTYPE_p_std__pairT_double_int_t swig_types[148]
-#define SWIGTYPE_p_std__pairT_int_int_t swig_types[149]
-#define SWIGTYPE_p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_double_std__allocatorT_double_t_t_t swig_types[150]
-#define SWIGTYPE_p_std__string swig_types[151]
-#define SWIGTYPE_p_std__vectorT_TexGen__CLinearTransformation_std__allocatorT_TexGen__CLinearTransformation_t_t swig_types[152]
-#define SWIGTYPE_p_std__vectorT_TexGen__CMeshDataBase_p_std__allocatorT_TexGen__CMeshDataBase_p_t_t swig_types[153]
-#define SWIGTYPE_p_std__vectorT_TexGen__CMesh_std__allocatorT_TexGen__CMesh_t_t swig_types[154]
-#define SWIGTYPE_p_std__vectorT_TexGen__CNode_std__allocatorT_TexGen__CNode_t_t swig_types[155]
-#define SWIGTYPE_p_std__vectorT_TexGen__CSlaveNode_std__allocatorT_TexGen__CSlaveNode_t_t swig_types[156]
-#define SWIGTYPE_p_std__vectorT_TexGen__CTextile_p_std__allocatorT_TexGen__CTextile_p_t_t swig_types[157]
-#define SWIGTYPE_p_std__vectorT_TexGen__CYarn_p_std__allocatorT_TexGen__CYarn_p_t_t swig_types[158]
-#define SWIGTYPE_p_std__vectorT_TexGen__CYarn_std__allocatorT_TexGen__CYarn_t_t swig_types[159]
-#define SWIGTYPE_p_std__vectorT_TexGen__ELEMENT_INDICES_std__allocatorT_TexGen__ELEMENT_INDICES_t_t swig_types[160]
-#define SWIGTYPE_p_std__vectorT_TexGen__PLANE_std__allocatorT_TexGen__PLANE_t_t swig_types[161]
-#define SWIGTYPE_p_std__vectorT_TexGen__POINT_INFO_std__allocatorT_TexGen__POINT_INFO_t_t swig_types[162]
-#define SWIGTYPE_p_std__vectorT_TexGen__XYZ_std__allocatorT_TexGen__XYZ_t_t swig_types[163]
-#define SWIGTYPE_p_std__vectorT_TexGen__XY_std__allocatorT_TexGen__XY_t_t swig_types[164]
-#define SWIGTYPE_p_std__vectorT__Tp__Alloc_t swig_types[165]
-#define SWIGTYPE_p_std__vectorT__Tp_p__Alloc_t swig_types[166]
-#define SWIGTYPE_p_std__vectorT_bool__Alloc_t swig_types[167]
-#define SWIGTYPE_p_std__vectorT_bool_std__allocatorT_bool_t_t swig_types[168]
-#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[169]
-#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[170]
-#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[171]
-#define SWIGTYPE_p_std__vectorT_std__pairT_double_TexGen__XYZ_t_std__allocatorT_std__pairT_double_TexGen__XYZ_t_t_t swig_types[172]
-#define SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t swig_types[173]
-#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[174]
-#define SWIGTYPE_p_std__vectorT_std__vectorT_int_p_std__allocatorT_int_p_t_t_std__allocatorT_std__vectorT_int_p_std__allocatorT_int_p_t_t_t_t swig_types[175]
-#define SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t swig_types[176]
-#define SWIGTYPE_p_swig__SwigPyIterator swig_types[177]
-#define SWIGTYPE_p_value_type swig_types[178]
-static swig_type_info *swig_types[180];
-static swig_module_info swig_module = {swig_types, 179, 0, 0, 0, 0};
+#define SWIGTYPE_p_SSIZE_T swig_types[4]
+#define SWIGTYPE_p_TexGen__CAdjustMeshInterference swig_types[5]
+#define SWIGTYPE_p_TexGen__CBasicVolumes swig_types[6]
+#define SWIGTYPE_p_TexGen__CDomain swig_types[7]
+#define SWIGTYPE_p_TexGen__CDomainPlanes swig_types[8]
+#define SWIGTYPE_p_TexGen__CFibreDistribution swig_types[9]
+#define SWIGTYPE_p_TexGen__CFibreDistribution1DQuad swig_types[10]
+#define SWIGTYPE_p_TexGen__CFibreDistributionConst swig_types[11]
+#define SWIGTYPE_p_TexGen__CGeometrySolver swig_types[12]
+#define SWIGTYPE_p_TexGen__CInterpolation swig_types[13]
+#define SWIGTYPE_p_TexGen__CInterpolationAdjusted swig_types[14]
+#define SWIGTYPE_p_TexGen__CInterpolationBezier swig_types[15]
+#define SWIGTYPE_p_TexGen__CInterpolationCubic swig_types[16]
+#define SWIGTYPE_p_TexGen__CInterpolationLinear swig_types[17]
+#define SWIGTYPE_p_TexGen__CKeywordMaterial swig_types[18]
+#define SWIGTYPE_p_TexGen__CLinearTransformation swig_types[19]
+#define SWIGTYPE_p_TexGen__CLogger swig_types[20]
+#define SWIGTYPE_p_TexGen__CMaterial swig_types[21]
+#define SWIGTYPE_p_TexGen__CMatrix swig_types[22]
+#define SWIGTYPE_p_TexGen__CMesh swig_types[23]
+#define SWIGTYPE_p_TexGen__CMeshDataBase swig_types[24]
+#define SWIGTYPE_p_TexGen__CMeshDataT_TexGen__XYZ_t swig_types[25]
+#define SWIGTYPE_p_TexGen__CMeshIntersectionData swig_types[26]
+#define SWIGTYPE_p_TexGen__CMesher swig_types[27]
+#define SWIGTYPE_p_TexGen__CMesherBase swig_types[28]
+#define SWIGTYPE_p_TexGen__CNode swig_types[29]
+#define SWIGTYPE_p_TexGen__COLOR swig_types[30]
+#define SWIGTYPE_p_TexGen__COctreeVoxelMesh swig_types[31]
+#define SWIGTYPE_p_TexGen__CPatternDraft swig_types[32]
+#define SWIGTYPE_p_TexGen__CPeriodicBoundaries swig_types[33]
+#define SWIGTYPE_p_TexGen__CProperties swig_types[34]
+#define SWIGTYPE_p_TexGen__CPropertiesTextile swig_types[35]
+#define SWIGTYPE_p_TexGen__CPropertiesYarn swig_types[36]
+#define SWIGTYPE_p_TexGen__CProperty swig_types[37]
+#define SWIGTYPE_p_TexGen__CRectangularVoxelMesh swig_types[38]
+#define SWIGTYPE_p_TexGen__CSection swig_types[39]
+#define SWIGTYPE_p_TexGen__CSectionBezier swig_types[40]
+#define SWIGTYPE_p_TexGen__CSectionEllipse swig_types[41]
+#define SWIGTYPE_p_TexGen__CSectionHybrid swig_types[42]
+#define SWIGTYPE_p_TexGen__CSectionLenticular swig_types[43]
+#define SWIGTYPE_p_TexGen__CSectionMesh swig_types[44]
+#define SWIGTYPE_p_TexGen__CSectionMeshRectangleSection swig_types[45]
+#define SWIGTYPE_p_TexGen__CSectionMeshRectangular swig_types[46]
+#define SWIGTYPE_p_TexGen__CSectionMeshTriangulate swig_types[47]
+#define SWIGTYPE_p_TexGen__CSectionPolygon swig_types[48]
+#define SWIGTYPE_p_TexGen__CSectionPowerEllipse swig_types[49]
+#define SWIGTYPE_p_TexGen__CSectionRectangle swig_types[50]
+#define SWIGTYPE_p_TexGen__CSectionRotated swig_types[51]
+#define SWIGTYPE_p_TexGen__CSectionScaled swig_types[52]
+#define SWIGTYPE_p_TexGen__CShearedPeriodicBoundaries swig_types[53]
+#define SWIGTYPE_p_TexGen__CShearedTextileWeave2D swig_types[54]
+#define SWIGTYPE_p_TexGen__CShearedVoxelMesh swig_types[55]
+#define SWIGTYPE_p_TexGen__CSimulation swig_types[56]
+#define SWIGTYPE_p_TexGen__CSimulationAbaqus swig_types[57]
+#define SWIGTYPE_p_TexGen__CSingletonT_TexGen__CTexGen_t swig_types[58]
+#define SWIGTYPE_p_TexGen__CSlaveNode swig_types[59]
+#define SWIGTYPE_p_TexGen__CStaggeredPeriodicBoundaries swig_types[60]
+#define SWIGTYPE_p_TexGen__CStaggeredVoxelMesh swig_types[61]
+#define SWIGTYPE_p_TexGen__CTetgenMesh swig_types[62]
+#define SWIGTYPE_p_TexGen__CTexGen swig_types[63]
+#define SWIGTYPE_p_TexGen__CTextile swig_types[64]
+#define SWIGTYPE_p_TexGen__CTextile3DWeave swig_types[65]
+#define SWIGTYPE_p_TexGen__CTextileAngleInterlock swig_types[66]
+#define SWIGTYPE_p_TexGen__CTextileDeformer swig_types[67]
+#define SWIGTYPE_p_TexGen__CTextileDeformerVolumeMesh swig_types[68]
+#define SWIGTYPE_p_TexGen__CTextileLayerToLayer swig_types[69]
+#define SWIGTYPE_p_TexGen__CTextileLayered swig_types[70]
+#define SWIGTYPE_p_TexGen__CTextileMaterials swig_types[71]
+#define SWIGTYPE_p_TexGen__CTextileOffsetAngleInterlock swig_types[72]
+#define SWIGTYPE_p_TexGen__CTextileOrthogonal swig_types[73]
+#define SWIGTYPE_p_TexGen__CTextileWeave swig_types[74]
+#define SWIGTYPE_p_TexGen__CTextileWeave2D swig_types[75]
+#define SWIGTYPE_p_TexGen__CTextileWeave3D swig_types[76]
+#define SWIGTYPE_p_TexGen__CUMAT swig_types[77]
+#define SWIGTYPE_p_TexGen__CVoxelMesh swig_types[78]
+#define SWIGTYPE_p_TexGen__CYarn swig_types[79]
+#define SWIGTYPE_p_TexGen__CYarnSection swig_types[80]
+#define SWIGTYPE_p_TexGen__CYarnSectionConstant swig_types[81]
+#define SWIGTYPE_p_TexGen__CYarnSectionInterp swig_types[82]
+#define SWIGTYPE_p_TexGen__CYarnSectionInterpNode swig_types[83]
+#define SWIGTYPE_p_TexGen__CYarnSectionInterpPosition swig_types[84]
+#define SWIGTYPE_p_TexGen__ELEMENT_INDICES swig_types[85]
+#define SWIGTYPE_p_TexGen__LessPairDoubleInt swig_types[86]
+#define SWIGTYPE_p_TexGen__LessPairDoubleXYZ swig_types[87]
+#define SWIGTYPE_p_TexGen__MESHER_ELEMENT_DATA swig_types[88]
+#define SWIGTYPE_p_TexGen__PLANE swig_types[89]
+#define SWIGTYPE_p_TexGen__PLANEPARAMS swig_types[90]
+#define SWIGTYPE_p_TexGen__POINT_INFO swig_types[91]
+#define SWIGTYPE_p_TexGen__WXYZ swig_types[92]
+#define SWIGTYPE_p_TexGen__XY swig_types[93]
+#define SWIGTYPE_p_TexGen__XYZ swig_types[94]
+#define SWIGTYPE_p_TexGen__YARNDATA swig_types[95]
+#define SWIGTYPE_p_TexGen__YARN_POSITION_INFORMATION swig_types[96]
+#define SWIGTYPE_p_TiXmlElement swig_types[97]
+#define SWIGTYPE_p_allocator_type swig_types[98]
+#define SWIGTYPE_p_bool swig_types[99]
+#define SWIGTYPE_p_char swig_types[100]
+#define SWIGTYPE_p_const_reference swig_types[101]
+#define SWIGTYPE_p_difference_type swig_types[102]
+#define SWIGTYPE_p_double swig_types[103]
+#define SWIGTYPE_p_f_std__string_bool__void swig_types[104]
+#define SWIGTYPE_p_first_type swig_types[105]
+#define SWIGTYPE_p_int swig_types[106]
+#define SWIGTYPE_p_key_type swig_types[107]
+#define SWIGTYPE_p_mapped_type swig_types[108]
+#define SWIGTYPE_p_ostream swig_types[109]
+#define SWIGTYPE_p_p_PyObject swig_types[110]
+#define SWIGTYPE_p_reference swig_types[111]
+#define SWIGTYPE_p_second_type swig_types[112]
+#define SWIGTYPE_p_setT_int_t swig_types[113]
+#define SWIGTYPE_p_size_type swig_types[114]
+#define SWIGTYPE_p_std__allocatorT_TexGen__CLinearTransformation_t swig_types[115]
+#define SWIGTYPE_p_std__allocatorT_TexGen__CMeshDataBase_p_t swig_types[116]
+#define SWIGTYPE_p_std__allocatorT_TexGen__CMesh_t swig_types[117]
+#define SWIGTYPE_p_std__allocatorT_TexGen__CNode_t swig_types[118]
+#define SWIGTYPE_p_std__allocatorT_TexGen__CSlaveNode_t swig_types[119]
+#define SWIGTYPE_p_std__allocatorT_TexGen__CTextile_p_t swig_types[120]
+#define SWIGTYPE_p_std__allocatorT_TexGen__CYarn_p_t swig_types[121]
+#define SWIGTYPE_p_std__allocatorT_TexGen__CYarn_t swig_types[122]
+#define SWIGTYPE_p_std__allocatorT_TexGen__MESHER_ELEMENT_DATA_t swig_types[123]
+#define SWIGTYPE_p_std__allocatorT_TexGen__PLANE_t swig_types[124]
+#define SWIGTYPE_p_std__allocatorT_TexGen__POINT_INFO_t swig_types[125]
+#define SWIGTYPE_p_std__allocatorT_TexGen__XYZ_t swig_types[126]
+#define SWIGTYPE_p_std__allocatorT_TexGen__XY_t swig_types[127]
+#define SWIGTYPE_p_std__allocatorT_bool_t swig_types[128]
+#define SWIGTYPE_p_std__allocatorT_double_t swig_types[129]
+#define SWIGTYPE_p_std__allocatorT_float_t swig_types[130]
+#define SWIGTYPE_p_std__allocatorT_int_t swig_types[131]
+#define SWIGTYPE_p_std__allocatorT_std__pairT_double_TexGen__XYZ_t_t swig_types[132]
+#define SWIGTYPE_p_std__allocatorT_std__pairT_int_int_t_t swig_types[133]
+#define SWIGTYPE_p_std__allocatorT_std__pairT_std__string_const_TexGen__CTextile_p_t_t swig_types[134]
+#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[135]
+#define SWIGTYPE_p_std__invalid_argument swig_types[136]
+#define SWIGTYPE_p_std__istream swig_types[137]
+#define SWIGTYPE_p_std__lessT_std__string_t swig_types[138]
+#define SWIGTYPE_p_std__listT_TexGen__CYarn_std__allocatorT_TexGen__CYarn_t_t swig_types[139]
+#define SWIGTYPE_p_std__listT_TexGen__MESHER_ELEMENT_DATA_std__allocatorT_TexGen__MESHER_ELEMENT_DATA_t_t swig_types[140]
+#define SWIGTYPE_p_std__listT__Tp__Alloc_t swig_types[141]
+#define SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t swig_types[142]
+#define SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t swig_types[143]
+#define SWIGTYPE_p_std__mapT_std__string_TexGen__CTextile_p_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_TexGen__CTextile_p_t_t_t swig_types[144]
+#define SWIGTYPE_p_std__mapT_std__string_std__pairT_CObjectContainerT_TexGen__CMaterial_t_CObjectContainerT_TexGen__CMaterial_t_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__pairT_CObjectContainerT_TexGen__CMaterial_t_CObjectContainerT_TexGen__CMaterial_t_t_t_t_t swig_types[145]
+#define SWIGTYPE_p_std__ostream swig_types[146]
+#define SWIGTYPE_p_std__pairT_TexGen__XYZ_TexGen__XYZ_t swig_types[147]
+#define SWIGTYPE_p_std__pairT_bool_bool_t swig_types[148]
+#define SWIGTYPE_p_std__pairT_double_TexGen__XYZ_t swig_types[149]
+#define SWIGTYPE_p_std__pairT_double_int_t swig_types[150]
+#define SWIGTYPE_p_std__pairT_int_int_t swig_types[151]
+#define SWIGTYPE_p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_double_std__allocatorT_double_t_t_t swig_types[152]
+#define SWIGTYPE_p_std__string swig_types[153]
+#define SWIGTYPE_p_std__vectorT_TexGen__CLinearTransformation_std__allocatorT_TexGen__CLinearTransformation_t_t swig_types[154]
+#define SWIGTYPE_p_std__vectorT_TexGen__CMeshDataBase_p_std__allocatorT_TexGen__CMeshDataBase_p_t_t swig_types[155]
+#define SWIGTYPE_p_std__vectorT_TexGen__CMesh_std__allocatorT_TexGen__CMesh_t_t swig_types[156]
+#define SWIGTYPE_p_std__vectorT_TexGen__CNode_std__allocatorT_TexGen__CNode_t_t swig_types[157]
+#define SWIGTYPE_p_std__vectorT_TexGen__CSlaveNode_std__allocatorT_TexGen__CSlaveNode_t_t swig_types[158]
+#define SWIGTYPE_p_std__vectorT_TexGen__CTextile_p_std__allocatorT_TexGen__CTextile_p_t_t swig_types[159]
+#define SWIGTYPE_p_std__vectorT_TexGen__CYarn_p_std__allocatorT_TexGen__CYarn_p_t_t swig_types[160]
+#define SWIGTYPE_p_std__vectorT_TexGen__CYarn_std__allocatorT_TexGen__CYarn_t_t swig_types[161]
+#define SWIGTYPE_p_std__vectorT_TexGen__ELEMENT_INDICES_std__allocatorT_TexGen__ELEMENT_INDICES_t_t swig_types[162]
+#define SWIGTYPE_p_std__vectorT_TexGen__PLANE_std__allocatorT_TexGen__PLANE_t_t swig_types[163]
+#define SWIGTYPE_p_std__vectorT_TexGen__POINT_INFO_std__allocatorT_TexGen__POINT_INFO_t_t swig_types[164]
+#define SWIGTYPE_p_std__vectorT_TexGen__XYZ_std__allocatorT_TexGen__XYZ_t_t swig_types[165]
+#define SWIGTYPE_p_std__vectorT_TexGen__XY_std__allocatorT_TexGen__XY_t_t swig_types[166]
+#define SWIGTYPE_p_std__vectorT__Tp__Alloc_t swig_types[167]
+#define SWIGTYPE_p_std__vectorT__Tp_p__Alloc_t swig_types[168]
+#define SWIGTYPE_p_std__vectorT_bool__Alloc_t swig_types[169]
+#define SWIGTYPE_p_std__vectorT_bool_std__allocatorT_bool_t_t swig_types[170]
+#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[171]
+#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[172]
+#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[173]
+#define SWIGTYPE_p_std__vectorT_std__pairT_double_TexGen__XYZ_t_std__allocatorT_std__pairT_double_TexGen__XYZ_t_t_t swig_types[174]
+#define SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t swig_types[175]
+#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[176]
+#define SWIGTYPE_p_std__vectorT_std__vectorT_int_p_std__allocatorT_int_p_t_t_std__allocatorT_std__vectorT_int_p_std__allocatorT_int_p_t_t_t_t swig_types[177]
+#define SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t swig_types[178]
+#define SWIGTYPE_p_swig__SwigPyIterator swig_types[179]
+#define SWIGTYPE_p_value_type swig_types[180]
+static swig_type_info *swig_types[182];
+static swig_module_info swig_module = {swig_types, 181, 0, 0, 0, 0};
 #define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
 #define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)
 
@@ -131884,6 +131886,688 @@ SWIGINTERN PyObject *CTextileMaterials_swigregister(PyObject *SWIGUNUSEDPARM(sel
   return SWIG_Py_Void();
 }
 
+SWIGINTERN PyObject *_wrap_new_COctreeVoxelMesh__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0;
+  std::string arg1 ;
+  PyObject * obj0 = 0 ;
+  TexGen::COctreeVoxelMesh *result = 0 ;
+  
+  if (!PyArg_ParseTuple(args,(char *)"O:new_COctreeVoxelMesh",&obj0)) SWIG_fail;
+  {
+    std::string *ptr = (std::string *)0;
+    int res = SWIG_AsPtr_std_string(obj0, &ptr);
+    if (!SWIG_IsOK(res) || !ptr) {
+      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_COctreeVoxelMesh" "', argument " "1"" of type '" "std::string""'"); 
+    }
+    arg1 = *ptr;
+    if (SWIG_IsNewObj(res)) delete ptr;
+  }
+  result = (TexGen::COctreeVoxelMesh *)new TexGen::COctreeVoxelMesh(arg1);
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TexGen__COctreeVoxelMesh, SWIG_POINTER_NEW |  0 );
+  return resultobj;
+fail:
+  return NULL;
+}
+
+
+SWIGINTERN PyObject *_wrap_new_COctreeVoxelMesh__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0;
+  TexGen::COctreeVoxelMesh *result = 0 ;
+  
+  if (!PyArg_ParseTuple(args,(char *)":new_COctreeVoxelMesh")) SWIG_fail;
+  result = (TexGen::COctreeVoxelMesh *)new TexGen::COctreeVoxelMesh();
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TexGen__COctreeVoxelMesh, SWIG_POINTER_NEW |  0 );
+  return resultobj;
+fail:
+  return NULL;
+}
+
+
+SWIGINTERN PyObject *_wrap_new_COctreeVoxelMesh(PyObject *self, PyObject *args) {
+  int argc;
+  PyObject *argv[2];
+  int ii;
+  
+  if (!PyTuple_Check(args)) SWIG_fail;
+  argc = args ? (int)PyObject_Length(args) : 0;
+  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii);
+  }
+  if (argc == 0) {
+    return _wrap_new_COctreeVoxelMesh__SWIG_1(self, args);
+  }
+  if (argc == 1) {
+    int _v;
+    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
+    _v = SWIG_CheckState(res);
+    if (_v) {
+      return _wrap_new_COctreeVoxelMesh__SWIG_0(self, args);
+    }
+  }
+  
+fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_COctreeVoxelMesh'.\n"
+    "  Possible C/C++ prototypes are:\n"
+    "    TexGen::COctreeVoxelMesh::COctreeVoxelMesh(std::string)\n"
+    "    TexGen::COctreeVoxelMesh::COctreeVoxelMesh()\n");
+  return 0;
+}
+
+
+SWIGINTERN PyObject *_wrap_delete_COctreeVoxelMesh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0;
+  TexGen::COctreeVoxelMesh *arg1 = (TexGen::COctreeVoxelMesh *) 0 ;
+  void *argp1 = 0 ;
+  int res1 = 0 ;
+  PyObject * obj0 = 0 ;
+  
+  if (!PyArg_ParseTuple(args,(char *)"O:delete_COctreeVoxelMesh",&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TexGen__COctreeVoxelMesh, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_COctreeVoxelMesh" "', argument " "1"" of type '" "TexGen::COctreeVoxelMesh *""'"); 
+  }
+  arg1 = reinterpret_cast< TexGen::COctreeVoxelMesh * >(argp1);
+  delete arg1;
+  resultobj = SWIG_Py_Void();
+  return resultobj;
+fail:
+  return NULL;
+}
+
+
+SWIGINTERN int Swig_var_COctreeVoxelMesh_max_level_set(PyObject *_val) {
+  {
+    int val;
+    int res = SWIG_AsVal_int(_val, &val);
+    if (!SWIG_IsOK(res)) {
+      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""TexGen::COctreeVoxelMesh::max_level""' of type '""int""'");
+    }
+    TexGen::COctreeVoxelMesh::max_level = static_cast< int >(val);
+  }
+  return 0;
+fail:
+  return 1;
+}
+
+
+SWIGINTERN PyObject *Swig_var_COctreeVoxelMesh_max_level_get(void) {
+  PyObject *pyobj = 0;
+  
+  pyobj = SWIG_From_int(static_cast< int >(TexGen::COctreeVoxelMesh::max_level));
+  return pyobj;
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_max_level_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
+  return Swig_var_COctreeVoxelMesh_max_level_get();
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_max_level_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  int res;
+  PyObject *value;
+  
+  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
+  res = Swig_var_COctreeVoxelMesh_max_level_set(value);
+  return !res ? SWIG_Py_Void() : NULL;
+}
+
+
+SWIGINTERN int Swig_var_COctreeVoxelMesh_cornerPoints_set(PyObject *_val) {
+  {
+    std::vector<TexGen::XYZ,std::allocator< TexGen::XYZ > > *ptr = (std::vector<TexGen::XYZ,std::allocator< TexGen::XYZ > > *)0;
+    int res = swig::asptr(_val, &ptr);
+    if (!SWIG_IsOK(res) || !ptr) {
+      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in variable '""TexGen::COctreeVoxelMesh::cornerPoints""' of type '""std::vector< TexGen::XYZ >""'"); 
+    }
+    TexGen::COctreeVoxelMesh::cornerPoints = *ptr;
+    if (SWIG_IsNewObj(res)) delete ptr;
+  }
+  return 0;
+fail:
+  return 1;
+}
+
+
+SWIGINTERN PyObject *Swig_var_COctreeVoxelMesh_cornerPoints_get(void) {
+  PyObject *pyobj = 0;
+  
+  pyobj = swig::from(static_cast< std::vector<TexGen::XYZ,std::allocator< TexGen::XYZ > > >(TexGen::COctreeVoxelMesh::cornerPoints));
+  return pyobj;
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_cornerPoints_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
+  return Swig_var_COctreeVoxelMesh_cornerPoints_get();
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_cornerPoints_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  int res;
+  PyObject *value;
+  
+  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
+  res = Swig_var_COctreeVoxelMesh_cornerPoints_set(value);
+  return !res ? SWIG_Py_Void() : NULL;
+}
+
+
+SWIGINTERN int Swig_var_COctreeVoxelMesh_CentrePoints_set(PyObject *_val) {
+  {
+    std::vector<TexGen::XYZ,std::allocator< TexGen::XYZ > > *ptr = (std::vector<TexGen::XYZ,std::allocator< TexGen::XYZ > > *)0;
+    int res = swig::asptr(_val, &ptr);
+    if (!SWIG_IsOK(res) || !ptr) {
+      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in variable '""TexGen::COctreeVoxelMesh::CentrePoints""' of type '""std::vector< TexGen::XYZ >""'"); 
+    }
+    TexGen::COctreeVoxelMesh::CentrePoints = *ptr;
+    if (SWIG_IsNewObj(res)) delete ptr;
+  }
+  return 0;
+fail:
+  return 1;
+}
+
+
+SWIGINTERN PyObject *Swig_var_COctreeVoxelMesh_CentrePoints_get(void) {
+  PyObject *pyobj = 0;
+  
+  pyobj = swig::from(static_cast< std::vector<TexGen::XYZ,std::allocator< TexGen::XYZ > > >(TexGen::COctreeVoxelMesh::CentrePoints));
+  return pyobj;
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_CentrePoints_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
+  return Swig_var_COctreeVoxelMesh_CentrePoints_get();
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_CentrePoints_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  int res;
+  PyObject *value;
+  
+  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
+  res = Swig_var_COctreeVoxelMesh_CentrePoints_set(value);
+  return !res ? SWIG_Py_Void() : NULL;
+}
+
+
+SWIGINTERN int Swig_var_COctreeVoxelMesh_FaceX_min_set(PyObject *_val) {
+  {
+    void *argp = 0;
+    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0  | 0);
+    if (!SWIG_IsOK(res)) {
+      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""TexGen::COctreeVoxelMesh::FaceX_min""' of type '""std::vector< std::vector< int > >""'");
+    }
+    if (!argp) {
+      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""TexGen::COctreeVoxelMesh::FaceX_min""' of type '""std::vector< std::vector< int > >""'");
+    } else {
+      std::vector< std::vector< int > > * temp;
+      temp  = reinterpret_cast< std::vector< std::vector< int > > * >(argp);
+      TexGen::COctreeVoxelMesh::FaceX_min = *temp;
+      if (SWIG_IsNewObj(res)) delete temp;
+    }
+  }
+  return 0;
+fail:
+  return 1;
+}
+
+
+SWIGINTERN PyObject *Swig_var_COctreeVoxelMesh_FaceX_min_get(void) {
+  PyObject *pyobj = 0;
+  
+  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&TexGen::COctreeVoxelMesh::FaceX_min), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0 );
+  return pyobj;
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_FaceX_min_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
+  return Swig_var_COctreeVoxelMesh_FaceX_min_get();
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_FaceX_min_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  int res;
+  PyObject *value;
+  
+  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
+  res = Swig_var_COctreeVoxelMesh_FaceX_min_set(value);
+  return !res ? SWIG_Py_Void() : NULL;
+}
+
+
+SWIGINTERN int Swig_var_COctreeVoxelMesh_FaceX_max_set(PyObject *_val) {
+  {
+    void *argp = 0;
+    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0  | 0);
+    if (!SWIG_IsOK(res)) {
+      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""TexGen::COctreeVoxelMesh::FaceX_max""' of type '""std::vector< std::vector< int > >""'");
+    }
+    if (!argp) {
+      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""TexGen::COctreeVoxelMesh::FaceX_max""' of type '""std::vector< std::vector< int > >""'");
+    } else {
+      std::vector< std::vector< int > > * temp;
+      temp  = reinterpret_cast< std::vector< std::vector< int > > * >(argp);
+      TexGen::COctreeVoxelMesh::FaceX_max = *temp;
+      if (SWIG_IsNewObj(res)) delete temp;
+    }
+  }
+  return 0;
+fail:
+  return 1;
+}
+
+
+SWIGINTERN PyObject *Swig_var_COctreeVoxelMesh_FaceX_max_get(void) {
+  PyObject *pyobj = 0;
+  
+  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&TexGen::COctreeVoxelMesh::FaceX_max), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0 );
+  return pyobj;
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_FaceX_max_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
+  return Swig_var_COctreeVoxelMesh_FaceX_max_get();
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_FaceX_max_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  int res;
+  PyObject *value;
+  
+  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
+  res = Swig_var_COctreeVoxelMesh_FaceX_max_set(value);
+  return !res ? SWIG_Py_Void() : NULL;
+}
+
+
+SWIGINTERN int Swig_var_COctreeVoxelMesh_FaceY_min_set(PyObject *_val) {
+  {
+    void *argp = 0;
+    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0  | 0);
+    if (!SWIG_IsOK(res)) {
+      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""TexGen::COctreeVoxelMesh::FaceY_min""' of type '""std::vector< std::vector< int > >""'");
+    }
+    if (!argp) {
+      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""TexGen::COctreeVoxelMesh::FaceY_min""' of type '""std::vector< std::vector< int > >""'");
+    } else {
+      std::vector< std::vector< int > > * temp;
+      temp  = reinterpret_cast< std::vector< std::vector< int > > * >(argp);
+      TexGen::COctreeVoxelMesh::FaceY_min = *temp;
+      if (SWIG_IsNewObj(res)) delete temp;
+    }
+  }
+  return 0;
+fail:
+  return 1;
+}
+
+
+SWIGINTERN PyObject *Swig_var_COctreeVoxelMesh_FaceY_min_get(void) {
+  PyObject *pyobj = 0;
+  
+  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&TexGen::COctreeVoxelMesh::FaceY_min), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0 );
+  return pyobj;
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_FaceY_min_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
+  return Swig_var_COctreeVoxelMesh_FaceY_min_get();
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_FaceY_min_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  int res;
+  PyObject *value;
+  
+  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
+  res = Swig_var_COctreeVoxelMesh_FaceY_min_set(value);
+  return !res ? SWIG_Py_Void() : NULL;
+}
+
+
+SWIGINTERN int Swig_var_COctreeVoxelMesh_FaceY_max_set(PyObject *_val) {
+  {
+    void *argp = 0;
+    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0  | 0);
+    if (!SWIG_IsOK(res)) {
+      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""TexGen::COctreeVoxelMesh::FaceY_max""' of type '""std::vector< std::vector< int > >""'");
+    }
+    if (!argp) {
+      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""TexGen::COctreeVoxelMesh::FaceY_max""' of type '""std::vector< std::vector< int > >""'");
+    } else {
+      std::vector< std::vector< int > > * temp;
+      temp  = reinterpret_cast< std::vector< std::vector< int > > * >(argp);
+      TexGen::COctreeVoxelMesh::FaceY_max = *temp;
+      if (SWIG_IsNewObj(res)) delete temp;
+    }
+  }
+  return 0;
+fail:
+  return 1;
+}
+
+
+SWIGINTERN PyObject *Swig_var_COctreeVoxelMesh_FaceY_max_get(void) {
+  PyObject *pyobj = 0;
+  
+  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&TexGen::COctreeVoxelMesh::FaceY_max), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0 );
+  return pyobj;
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_FaceY_max_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
+  return Swig_var_COctreeVoxelMesh_FaceY_max_get();
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_FaceY_max_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  int res;
+  PyObject *value;
+  
+  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
+  res = Swig_var_COctreeVoxelMesh_FaceY_max_set(value);
+  return !res ? SWIG_Py_Void() : NULL;
+}
+
+
+SWIGINTERN int Swig_var_COctreeVoxelMesh_FaceZ_min_set(PyObject *_val) {
+  {
+    void *argp = 0;
+    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0  | 0);
+    if (!SWIG_IsOK(res)) {
+      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""TexGen::COctreeVoxelMesh::FaceZ_min""' of type '""std::vector< std::vector< int > >""'");
+    }
+    if (!argp) {
+      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""TexGen::COctreeVoxelMesh::FaceZ_min""' of type '""std::vector< std::vector< int > >""'");
+    } else {
+      std::vector< std::vector< int > > * temp;
+      temp  = reinterpret_cast< std::vector< std::vector< int > > * >(argp);
+      TexGen::COctreeVoxelMesh::FaceZ_min = *temp;
+      if (SWIG_IsNewObj(res)) delete temp;
+    }
+  }
+  return 0;
+fail:
+  return 1;
+}
+
+
+SWIGINTERN PyObject *Swig_var_COctreeVoxelMesh_FaceZ_min_get(void) {
+  PyObject *pyobj = 0;
+  
+  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&TexGen::COctreeVoxelMesh::FaceZ_min), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0 );
+  return pyobj;
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_FaceZ_min_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
+  return Swig_var_COctreeVoxelMesh_FaceZ_min_get();
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_FaceZ_min_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  int res;
+  PyObject *value;
+  
+  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
+  res = Swig_var_COctreeVoxelMesh_FaceZ_min_set(value);
+  return !res ? SWIG_Py_Void() : NULL;
+}
+
+
+SWIGINTERN int Swig_var_COctreeVoxelMesh_FaceZ_max_set(PyObject *_val) {
+  {
+    void *argp = 0;
+    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0  | 0);
+    if (!SWIG_IsOK(res)) {
+      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""TexGen::COctreeVoxelMesh::FaceZ_max""' of type '""std::vector< std::vector< int > >""'");
+    }
+    if (!argp) {
+      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""TexGen::COctreeVoxelMesh::FaceZ_max""' of type '""std::vector< std::vector< int > >""'");
+    } else {
+      std::vector< std::vector< int > > * temp;
+      temp  = reinterpret_cast< std::vector< std::vector< int > > * >(argp);
+      TexGen::COctreeVoxelMesh::FaceZ_max = *temp;
+      if (SWIG_IsNewObj(res)) delete temp;
+    }
+  }
+  return 0;
+fail:
+  return 1;
+}
+
+
+SWIGINTERN PyObject *Swig_var_COctreeVoxelMesh_FaceZ_max_get(void) {
+  PyObject *pyobj = 0;
+  
+  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&TexGen::COctreeVoxelMesh::FaceZ_max), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0 );
+  return pyobj;
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_FaceZ_max_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
+  return Swig_var_COctreeVoxelMesh_FaceZ_max_get();
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_FaceZ_max_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  int res;
+  PyObject *value;
+  
+  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
+  res = Swig_var_COctreeVoxelMesh_FaceZ_max_set(value);
+  return !res ? SWIG_Py_Void() : NULL;
+}
+
+
+SWIGINTERN int Swig_var_COctreeVoxelMesh_gTextile_set(PyObject *_val) {
+  {
+    void *argp = 0;
+    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_TexGen__CTextile,  0  | 0);
+    if (!SWIG_IsOK(res)) {
+      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""TexGen::COctreeVoxelMesh::gTextile""' of type '""TexGen::CTextile""'");
+    }
+    if (!argp) {
+      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""TexGen::COctreeVoxelMesh::gTextile""' of type '""TexGen::CTextile""'");
+    } else {
+      TexGen::CTextile * temp;
+      temp  = reinterpret_cast< TexGen::CTextile * >(argp);
+      TexGen::COctreeVoxelMesh::gTextile = *temp;
+      if (SWIG_IsNewObj(res)) delete temp;
+    }
+  }
+  return 0;
+fail:
+  return 1;
+}
+
+
+SWIGINTERN PyObject *Swig_var_COctreeVoxelMesh_gTextile_get(void) {
+  PyObject *pyobj = 0;
+  
+  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&TexGen::COctreeVoxelMesh::gTextile), SWIGTYPE_p_TexGen__CTextile,  0 );
+  return pyobj;
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_gTextile_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
+  return Swig_var_COctreeVoxelMesh_gTextile_get();
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_gTextile_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  int res;
+  PyObject *value;
+  
+  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
+  res = Swig_var_COctreeVoxelMesh_gTextile_set(value);
+  return !res ? SWIG_Py_Void() : NULL;
+}
+
+
+SWIGINTERN int Swig_var_COctreeVoxelMesh_g_DomainAABB_set(PyObject *_val) {
+  {
+    std::pair<TexGen::XYZ,TexGen::XYZ > *ptr = (std::pair<TexGen::XYZ,TexGen::XYZ > *)0;
+    int res = swig::asptr(_val, &ptr);
+    if (!SWIG_IsOK(res) || !ptr) {
+      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in variable '""TexGen::COctreeVoxelMesh::g_DomainAABB""' of type '""std::pair< TexGen::XYZ,TexGen::XYZ >""'"); 
+    }
+    TexGen::COctreeVoxelMesh::g_DomainAABB = *ptr;
+    if (SWIG_IsNewObj(res)) delete ptr;
+  }
+  return 0;
+fail:
+  return 1;
+}
+
+
+SWIGINTERN PyObject *Swig_var_COctreeVoxelMesh_g_DomainAABB_get(void) {
+  PyObject *pyobj = 0;
+  
+  pyobj = swig::from(static_cast< std::pair<TexGen::XYZ,TexGen::XYZ > >(TexGen::COctreeVoxelMesh::g_DomainAABB));
+  return pyobj;
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_g_DomainAABB_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
+  return Swig_var_COctreeVoxelMesh_g_DomainAABB_get();
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_g_DomainAABB_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  int res;
+  PyObject *value;
+  
+  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
+  res = Swig_var_COctreeVoxelMesh_g_DomainAABB_set(value);
+  return !res ? SWIG_Py_Void() : NULL;
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_SaveVoxelMesh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0;
+  TexGen::COctreeVoxelMesh *arg1 = (TexGen::COctreeVoxelMesh *) 0 ;
+  TexGen::CTextile *arg2 = 0 ;
+  std::string arg3 ;
+  int arg4 ;
+  int arg5 ;
+  bool arg6 ;
+  int arg7 ;
+  double arg8 ;
+  double arg9 ;
+  bool arg10 ;
+  bool arg11 ;
+  void *argp1 = 0 ;
+  int res1 = 0 ;
+  void *argp2 = 0 ;
+  int res2 = 0 ;
+  int val4 ;
+  int ecode4 = 0 ;
+  int val5 ;
+  int ecode5 = 0 ;
+  bool val6 ;
+  int ecode6 = 0 ;
+  int val7 ;
+  int ecode7 = 0 ;
+  double val8 ;
+  int ecode8 = 0 ;
+  double val9 ;
+  int ecode9 = 0 ;
+  bool val10 ;
+  int ecode10 = 0 ;
+  bool val11 ;
+  int ecode11 = 0 ;
+  PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ;
+  PyObject * obj2 = 0 ;
+  PyObject * obj3 = 0 ;
+  PyObject * obj4 = 0 ;
+  PyObject * obj5 = 0 ;
+  PyObject * obj6 = 0 ;
+  PyObject * obj7 = 0 ;
+  PyObject * obj8 = 0 ;
+  PyObject * obj9 = 0 ;
+  PyObject * obj10 = 0 ;
+  
+  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:COctreeVoxelMesh_SaveVoxelMesh",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TexGen__COctreeVoxelMesh, 0 |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COctreeVoxelMesh_SaveVoxelMesh" "', argument " "1"" of type '" "TexGen::COctreeVoxelMesh *""'"); 
+  }
+  arg1 = reinterpret_cast< TexGen::COctreeVoxelMesh * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TexGen__CTextile,  0 );
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "COctreeVoxelMesh_SaveVoxelMesh" "', argument " "2"" of type '" "TexGen::CTextile &""'"); 
+  }
+  if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "COctreeVoxelMesh_SaveVoxelMesh" "', argument " "2"" of type '" "TexGen::CTextile &""'"); 
+  }
+  arg2 = reinterpret_cast< TexGen::CTextile * >(argp2);
+  {
+    std::string *ptr = (std::string *)0;
+    int res = SWIG_AsPtr_std_string(obj2, &ptr);
+    if (!SWIG_IsOK(res) || !ptr) {
+      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "COctreeVoxelMesh_SaveVoxelMesh" "', argument " "3"" of type '" "std::string""'"); 
+    }
+    arg3 = *ptr;
+    if (SWIG_IsNewObj(res)) delete ptr;
+  }
+  ecode4 = SWIG_AsVal_int(obj3, &val4);
+  if (!SWIG_IsOK(ecode4)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "COctreeVoxelMesh_SaveVoxelMesh" "', argument " "4"" of type '" "int""'");
+  } 
+  arg4 = static_cast< int >(val4);
+  ecode5 = SWIG_AsVal_int(obj4, &val5);
+  if (!SWIG_IsOK(ecode5)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "COctreeVoxelMesh_SaveVoxelMesh" "', argument " "5"" of type '" "int""'");
+  } 
+  arg5 = static_cast< int >(val5);
+  ecode6 = SWIG_AsVal_bool(obj5, &val6);
+  if (!SWIG_IsOK(ecode6)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "COctreeVoxelMesh_SaveVoxelMesh" "', argument " "6"" of type '" "bool""'");
+  } 
+  arg6 = static_cast< bool >(val6);
+  ecode7 = SWIG_AsVal_int(obj6, &val7);
+  if (!SWIG_IsOK(ecode7)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "COctreeVoxelMesh_SaveVoxelMesh" "', argument " "7"" of type '" "int""'");
+  } 
+  arg7 = static_cast< int >(val7);
+  ecode8 = SWIG_AsVal_double(obj7, &val8);
+  if (!SWIG_IsOK(ecode8)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "COctreeVoxelMesh_SaveVoxelMesh" "', argument " "8"" of type '" "double""'");
+  } 
+  arg8 = static_cast< double >(val8);
+  ecode9 = SWIG_AsVal_double(obj8, &val9);
+  if (!SWIG_IsOK(ecode9)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "COctreeVoxelMesh_SaveVoxelMesh" "', argument " "9"" of type '" "double""'");
+  } 
+  arg9 = static_cast< double >(val9);
+  ecode10 = SWIG_AsVal_bool(obj9, &val10);
+  if (!SWIG_IsOK(ecode10)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "COctreeVoxelMesh_SaveVoxelMesh" "', argument " "10"" of type '" "bool""'");
+  } 
+  arg10 = static_cast< bool >(val10);
+  ecode11 = SWIG_AsVal_bool(obj10, &val11);
+  if (!SWIG_IsOK(ecode11)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "COctreeVoxelMesh_SaveVoxelMesh" "', argument " "11"" of type '" "bool""'");
+  } 
+  arg11 = static_cast< bool >(val11);
+  (arg1)->SaveVoxelMesh(*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
+  resultobj = SWIG_Py_Void();
+  return resultobj;
+fail:
+  return NULL;
+}
+
+
+SWIGINTERN PyObject *COctreeVoxelMesh_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_TexGen__COctreeVoxelMesh, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
 SWIGINTERN PyObject *_wrap_new_CPatternDraft__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
   PyObject *resultobj = 0;
   TexGen::CPatternDraft *result = 0 ;
@@ -134902,6 +135586,32 @@ static PyMethodDef SwigMethods[] = {
 	 { (char *)"CTextileMaterials_GetMaterialAssignements", _wrap_CTextileMaterials_GetMaterialAssignements, METH_VARARGS, NULL},
 	 { (char *)"new_CTextileMaterials", _wrap_new_CTextileMaterials, METH_VARARGS, NULL},
 	 { (char *)"CTextileMaterials_swigregister", CTextileMaterials_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_COctreeVoxelMesh", _wrap_new_COctreeVoxelMesh, METH_VARARGS, NULL},
+	 { (char *)"delete_COctreeVoxelMesh", _wrap_delete_COctreeVoxelMesh, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_max_level_get", _wrap_COctreeVoxelMesh_max_level_get, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_max_level_set", _wrap_COctreeVoxelMesh_max_level_set, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_cornerPoints_get", _wrap_COctreeVoxelMesh_cornerPoints_get, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_cornerPoints_set", _wrap_COctreeVoxelMesh_cornerPoints_set, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_CentrePoints_get", _wrap_COctreeVoxelMesh_CentrePoints_get, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_CentrePoints_set", _wrap_COctreeVoxelMesh_CentrePoints_set, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_FaceX_min_get", _wrap_COctreeVoxelMesh_FaceX_min_get, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_FaceX_min_set", _wrap_COctreeVoxelMesh_FaceX_min_set, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_FaceX_max_get", _wrap_COctreeVoxelMesh_FaceX_max_get, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_FaceX_max_set", _wrap_COctreeVoxelMesh_FaceX_max_set, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_FaceY_min_get", _wrap_COctreeVoxelMesh_FaceY_min_get, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_FaceY_min_set", _wrap_COctreeVoxelMesh_FaceY_min_set, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_FaceY_max_get", _wrap_COctreeVoxelMesh_FaceY_max_get, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_FaceY_max_set", _wrap_COctreeVoxelMesh_FaceY_max_set, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_FaceZ_min_get", _wrap_COctreeVoxelMesh_FaceZ_min_get, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_FaceZ_min_set", _wrap_COctreeVoxelMesh_FaceZ_min_set, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_FaceZ_max_get", _wrap_COctreeVoxelMesh_FaceZ_max_get, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_FaceZ_max_set", _wrap_COctreeVoxelMesh_FaceZ_max_set, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_gTextile_get", _wrap_COctreeVoxelMesh_gTextile_get, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_gTextile_set", _wrap_COctreeVoxelMesh_gTextile_set, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_g_DomainAABB_get", _wrap_COctreeVoxelMesh_g_DomainAABB_get, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_g_DomainAABB_set", _wrap_COctreeVoxelMesh_g_DomainAABB_set, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_SaveVoxelMesh", _wrap_COctreeVoxelMesh_SaveVoxelMesh, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_swigregister", COctreeVoxelMesh_swigregister, METH_VARARGS, NULL},
 	 { (char *)"delete_CPatternDraft", _wrap_delete_CPatternDraft, METH_VARARGS, NULL},
 	 { (char *)"CPatternDraft_AddRow", _wrap_CPatternDraft_AddRow, METH_VARARGS, NULL},
 	 { (char *)"CPatternDraft_ClearWeavePattern", _wrap_CPatternDraft_ClearWeavePattern, METH_VARARGS, NULL},
@@ -135039,6 +135749,9 @@ static void *_p_TexGen__CShearedVoxelMeshTo_p_TexGen__CVoxelMesh(void *x, int *S
 static void *_p_TexGen__CStaggeredVoxelMeshTo_p_TexGen__CVoxelMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
     return (void *)((TexGen::CVoxelMesh *) (TexGen::CRectangularVoxelMesh *) ((TexGen::CStaggeredVoxelMesh *) x));
 }
+static void *_p_TexGen__COctreeVoxelMeshTo_p_TexGen__CVoxelMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
+    return (void *)((TexGen::CVoxelMesh *)  ((TexGen::COctreeVoxelMesh *) x));
+}
 static void *_p_TexGen__CFibreDistribution1DQuadTo_p_TexGen__CFibreDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
     return (void *)((TexGen::CFibreDistribution *)  ((TexGen::CFibreDistribution1DQuad *) x));
 }
@@ -135196,6 +135909,7 @@ static swig_type_info _swigt__p_CObjectContainerT_TexGen__CInterpolation_t = {"_
 static swig_type_info _swigt__p_CObjectContainerT_TexGen__CSectionMesh_t = {"_p_CObjectContainerT_TexGen__CSectionMesh_t", "CObjectContainer< TexGen::CSectionMesh > *", 0, 0, (void*)0, 0};
 static swig_type_info _swigt__p_CObjectContainerT_TexGen__CSection_t = {"_p_CObjectContainerT_TexGen__CSection_t", "CObjectContainer< TexGen::CSection > *", 0, 0, (void*)0, 0};
 static swig_type_info _swigt__p_CObjectContainerT_TexGen__CYarnSection_t = {"_p_CObjectContainerT_TexGen__CYarnSection_t", "CObjectContainer< TexGen::CYarnSection > *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_SSIZE_T = {"_p_SSIZE_T", "ssize_t *|SSIZE_T *", 0, 0, (void*)0, 0};
 static swig_type_info _swigt__p_TexGen__CAdjustMeshInterference = {"_p_TexGen__CAdjustMeshInterference", "TexGen::CAdjustMeshInterference *", 0, 0, (void*)0, 0};
 static swig_type_info _swigt__p_TexGen__CBasicVolumes = {"_p_TexGen__CBasicVolumes", "TexGen::CBasicVolumes *", 0, 0, (void*)0, 0};
 static swig_type_info _swigt__p_TexGen__CDomain = {"_p_TexGen__CDomain", "TexGen::CDomain *", 0, 0, (void*)0, 0};
@@ -135222,6 +135936,7 @@ static swig_type_info _swigt__p_TexGen__CMesher = {"_p_TexGen__CMesher", "TexGen
 static swig_type_info _swigt__p_TexGen__CMesherBase = {"_p_TexGen__CMesherBase", "TexGen::CMesherBase *", 0, 0, (void*)0, 0};
 static swig_type_info _swigt__p_TexGen__CNode = {"_p_TexGen__CNode", "TexGen::CNode *|std::vector< TexGen::CNode >::value_type *", 0, 0, (void*)0, 0};
 static swig_type_info _swigt__p_TexGen__COLOR = {"_p_TexGen__COLOR", "TexGen::COLOR *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_TexGen__COctreeVoxelMesh = {"_p_TexGen__COctreeVoxelMesh", "TexGen::COctreeVoxelMesh *", 0, 0, (void*)0, 0};
 static swig_type_info _swigt__p_TexGen__CPatternDraft = {"_p_TexGen__CPatternDraft", "TexGen::CPatternDraft *", 0, 0, (void*)0, 0};
 static swig_type_info _swigt__p_TexGen__CPeriodicBoundaries = {"_p_TexGen__CPeriodicBoundaries", "TexGen::CPeriodicBoundaries *", 0, 0, (void*)0, 0};
 static swig_type_info _swigt__p_TexGen__CProperties = {"_p_TexGen__CProperties", "TexGen::CProperties *", 0, 0, (void*)0, 0};
@@ -135377,6 +136092,7 @@ static swig_type_info *swig_type_initial[] = {
   &_swigt__p_CObjectContainerT_TexGen__CSectionMesh_t,
   &_swigt__p_CObjectContainerT_TexGen__CSection_t,
   &_swigt__p_CObjectContainerT_TexGen__CYarnSection_t,
+  &_swigt__p_SSIZE_T,
   &_swigt__p_TexGen__CAdjustMeshInterference,
   &_swigt__p_TexGen__CBasicVolumes,
   &_swigt__p_TexGen__CDomain,
@@ -135403,6 +136119,7 @@ static swig_type_info *swig_type_initial[] = {
   &_swigt__p_TexGen__CMesherBase,
   &_swigt__p_TexGen__CNode,
   &_swigt__p_TexGen__COLOR,
+  &_swigt__p_TexGen__COctreeVoxelMesh,
   &_swigt__p_TexGen__CPatternDraft,
   &_swigt__p_TexGen__CPeriodicBoundaries,
   &_swigt__p_TexGen__CProperties,
@@ -135558,6 +136275,7 @@ static swig_cast_info _swigc__p_CObjectContainerT_TexGen__CInterpolation_t[] = {
 static swig_cast_info _swigc__p_CObjectContainerT_TexGen__CSectionMesh_t[] = {  {&_swigt__p_CObjectContainerT_TexGen__CSectionMesh_t, 0, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_CObjectContainerT_TexGen__CSection_t[] = {  {&_swigt__p_CObjectContainerT_TexGen__CSection_t, 0, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_CObjectContainerT_TexGen__CYarnSection_t[] = {  {&_swigt__p_CObjectContainerT_TexGen__CYarnSection_t, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_SSIZE_T[] = {  {&_swigt__p_SSIZE_T, 0, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__CAdjustMeshInterference[] = {  {&_swigt__p_TexGen__CAdjustMeshInterference, 0, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__CBasicVolumes[] = {  {&_swigt__p_TexGen__CBasicVolumes, 0, 0, 0},  {&_swigt__p_TexGen__CGeometrySolver, _p_TexGen__CGeometrySolverTo_p_TexGen__CBasicVolumes, 0, 0},  {&_swigt__p_TexGen__CMesher, _p_TexGen__CMesherTo_p_TexGen__CBasicVolumes, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__CDomain[] = {  {&_swigt__p_TexGen__CDomain, 0, 0, 0},  {&_swigt__p_TexGen__CDomainPlanes, _p_TexGen__CDomainPlanesTo_p_TexGen__CDomain, 0, 0},{0, 0, 0, 0}};
@@ -135584,6 +136302,7 @@ static swig_cast_info _swigc__p_TexGen__CMesher[] = {  {&_swigt__p_TexGen__CMesh
 static swig_cast_info _swigc__p_TexGen__CMesherBase[] = {  {&_swigt__p_TexGen__CMesherBase, 0, 0, 0},  {&_swigt__p_TexGen__CMesher, _p_TexGen__CMesherTo_p_TexGen__CMesherBase, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__CNode[] = {  {&_swigt__p_TexGen__CNode, 0, 0, 0},  {&_swigt__p_TexGen__CSlaveNode, _p_TexGen__CSlaveNodeTo_p_TexGen__CNode, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__COLOR[] = {  {&_swigt__p_TexGen__COLOR, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_TexGen__COctreeVoxelMesh[] = {  {&_swigt__p_TexGen__COctreeVoxelMesh, 0, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__CPatternDraft[] = {  {&_swigt__p_TexGen__CPatternDraft, 0, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__CPeriodicBoundaries[] = {  {&_swigt__p_TexGen__CPeriodicBoundaries, 0, 0, 0},  {&_swigt__p_TexGen__CShearedPeriodicBoundaries, _p_TexGen__CShearedPeriodicBoundariesTo_p_TexGen__CPeriodicBoundaries, 0, 0},  {&_swigt__p_TexGen__CStaggeredPeriodicBoundaries, _p_TexGen__CStaggeredPeriodicBoundariesTo_p_TexGen__CPeriodicBoundaries, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__CProperties[] = {  {&_swigt__p_TexGen__CTextileLayered, _p_TexGen__CTextileLayeredTo_p_TexGen__CProperties, 0, 0},  {&_swigt__p_TexGen__CTextileOrthogonal, _p_TexGen__CTextileOrthogonalTo_p_TexGen__CProperties, 0, 0},  {&_swigt__p_TexGen__CTextileWeave3D, _p_TexGen__CTextileWeave3DTo_p_TexGen__CProperties, 0, 0},  {&_swigt__p_TexGen__CShearedTextileWeave2D, _p_TexGen__CShearedTextileWeave2DTo_p_TexGen__CProperties, 0, 0},  {&_swigt__p_TexGen__CTextileWeave2D, _p_TexGen__CTextileWeave2DTo_p_TexGen__CProperties, 0, 0},  {&_swigt__p_TexGen__CTextile3DWeave, _p_TexGen__CTextile3DWeaveTo_p_TexGen__CProperties, 0, 0},  {&_swigt__p_TexGen__CTextileOffsetAngleInterlock, _p_TexGen__CTextileOffsetAngleInterlockTo_p_TexGen__CProperties, 0, 0},  {&_swigt__p_TexGen__CTextileAngleInterlock, _p_TexGen__CTextileAngleInterlockTo_p_TexGen__CProperties, 0, 0},  {&_swigt__p_TexGen__CTextileWeave, _p_TexGen__CTextileWeaveTo_p_TexGen__CProperties, 0, 0},  {&_swigt__p_TexGen__CTextile, _p_TexGen__CTextileTo_p_TexGen__CProperties, 0, 0},  {&_swigt__p_TexGen__CPropertiesTextile, _p_TexGen__CPropertiesTextileTo_p_TexGen__CProperties, 0, 0},  {&_swigt__p_TexGen__CProperties, 0, 0, 0},  {&_swigt__p_TexGen__CTextileLayerToLayer, _p_TexGen__CTextileLayerToLayerTo_p_TexGen__CProperties, 0, 0},  {&_swigt__p_TexGen__CPropertiesYarn, _p_TexGen__CPropertiesYarnTo_p_TexGen__CProperties, 0, 0},  {&_swigt__p_TexGen__CYarn, _p_TexGen__CYarnTo_p_TexGen__CProperties, 0, 0},{0, 0, 0, 0}};
@@ -135630,7 +136349,7 @@ static swig_cast_info _swigc__p_TexGen__CTextileWeave[] = {  {&_swigt__p_TexGen_
 static swig_cast_info _swigc__p_TexGen__CTextileWeave2D[] = {  {&_swigt__p_TexGen__CTextileWeave2D, 0, 0, 0},  {&_swigt__p_TexGen__CShearedTextileWeave2D, _p_TexGen__CShearedTextileWeave2DTo_p_TexGen__CTextileWeave2D, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__CTextileWeave3D[] = {  {&_swigt__p_TexGen__CTextileWeave3D, 0, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__CUMAT[] = {  {&_swigt__p_TexGen__CUMAT, 0, 0, 0},{0, 0, 0, 0}};
-static swig_cast_info _swigc__p_TexGen__CVoxelMesh[] = {  {&_swigt__p_TexGen__CVoxelMesh, 0, 0, 0},  {&_swigt__p_TexGen__CRectangularVoxelMesh, _p_TexGen__CRectangularVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},  {&_swigt__p_TexGen__CStaggeredVoxelMesh, _p_TexGen__CStaggeredVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},  {&_swigt__p_TexGen__CShearedVoxelMesh, _p_TexGen__CShearedVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_TexGen__CVoxelMesh[] = {  {&_swigt__p_TexGen__CVoxelMesh, 0, 0, 0},  {&_swigt__p_TexGen__CRectangularVoxelMesh, _p_TexGen__CRectangularVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},  {&_swigt__p_TexGen__CStaggeredVoxelMesh, _p_TexGen__CStaggeredVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},  {&_swigt__p_TexGen__CShearedVoxelMesh, _p_TexGen__CShearedVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},  {&_swigt__p_TexGen__COctreeVoxelMesh, _p_TexGen__COctreeVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__CYarn[] = {  {&_swigt__p_TexGen__CYarn, 0, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__CYarnSection[] = {  {&_swigt__p_TexGen__CYarnSectionInterp, _p_TexGen__CYarnSectionInterpTo_p_TexGen__CYarnSection, 0, 0},  {&_swigt__p_TexGen__CYarnSectionInterpPosition, _p_TexGen__CYarnSectionInterpPositionTo_p_TexGen__CYarnSection, 0, 0},  {&_swigt__p_TexGen__CYarnSectionConstant, _p_TexGen__CYarnSectionConstantTo_p_TexGen__CYarnSection, 0, 0},  {&_swigt__p_TexGen__CYarnSectionInterpNode, _p_TexGen__CYarnSectionInterpNodeTo_p_TexGen__CYarnSection, 0, 0},  {&_swigt__p_TexGen__CYarnSection, 0, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__CYarnSectionConstant[] = {  {&_swigt__p_TexGen__CYarnSectionConstant, 0, 0, 0},{0, 0, 0, 0}};
@@ -135739,6 +136458,7 @@ static swig_cast_info *swig_cast_initial[] = {
   _swigc__p_CObjectContainerT_TexGen__CSectionMesh_t,
   _swigc__p_CObjectContainerT_TexGen__CSection_t,
   _swigc__p_CObjectContainerT_TexGen__CYarnSection_t,
+  _swigc__p_SSIZE_T,
   _swigc__p_TexGen__CAdjustMeshInterference,
   _swigc__p_TexGen__CBasicVolumes,
   _swigc__p_TexGen__CDomain,
@@ -135765,6 +136485,7 @@ static swig_cast_info *swig_cast_initial[] = {
   _swigc__p_TexGen__CMesherBase,
   _swigc__p_TexGen__CNode,
   _swigc__p_TexGen__COLOR,
+  _swigc__p_TexGen__COctreeVoxelMesh,
   _swigc__p_TexGen__CPatternDraft,
   _swigc__p_TexGen__CPeriodicBoundaries,
   _swigc__p_TexGen__CProperties,
@@ -136643,6 +137364,18 @@ SWIG_init(void) {
   SWIG_Python_SetConstant(d, "BOTTOM_TO_TOP",SWIG_From_int(static_cast< int >(TexGen::BOTTOM_TO_TOP)));
   SWIG_Python_SetConstant(d, "TOP_TO_BOTTOM",SWIG_From_int(static_cast< int >(TexGen::TOP_TO_BOTTOM)));
   SWIG_Python_SetConstant(d, "ALTERNATE_WEFT_STACK",SWIG_From_int(static_cast< int >(TexGen::ALTERNATE_WEFT_STACK)));
+  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
+  SWIG_addvarlink(SWIG_globals(),(char*)"COctreeVoxelMesh_max_level",Swig_var_COctreeVoxelMesh_max_level_get, Swig_var_COctreeVoxelMesh_max_level_set);
+  SWIG_addvarlink(SWIG_globals(),(char*)"COctreeVoxelMesh_cornerPoints",Swig_var_COctreeVoxelMesh_cornerPoints_get, Swig_var_COctreeVoxelMesh_cornerPoints_set);
+  SWIG_addvarlink(SWIG_globals(),(char*)"COctreeVoxelMesh_CentrePoints",Swig_var_COctreeVoxelMesh_CentrePoints_get, Swig_var_COctreeVoxelMesh_CentrePoints_set);
+  SWIG_addvarlink(SWIG_globals(),(char*)"COctreeVoxelMesh_FaceX_min",Swig_var_COctreeVoxelMesh_FaceX_min_get, Swig_var_COctreeVoxelMesh_FaceX_min_set);
+  SWIG_addvarlink(SWIG_globals(),(char*)"COctreeVoxelMesh_FaceX_max",Swig_var_COctreeVoxelMesh_FaceX_max_get, Swig_var_COctreeVoxelMesh_FaceX_max_set);
+  SWIG_addvarlink(SWIG_globals(),(char*)"COctreeVoxelMesh_FaceY_min",Swig_var_COctreeVoxelMesh_FaceY_min_get, Swig_var_COctreeVoxelMesh_FaceY_min_set);
+  SWIG_addvarlink(SWIG_globals(),(char*)"COctreeVoxelMesh_FaceY_max",Swig_var_COctreeVoxelMesh_FaceY_max_get, Swig_var_COctreeVoxelMesh_FaceY_max_set);
+  SWIG_addvarlink(SWIG_globals(),(char*)"COctreeVoxelMesh_FaceZ_min",Swig_var_COctreeVoxelMesh_FaceZ_min_get, Swig_var_COctreeVoxelMesh_FaceZ_min_set);
+  SWIG_addvarlink(SWIG_globals(),(char*)"COctreeVoxelMesh_FaceZ_max",Swig_var_COctreeVoxelMesh_FaceZ_max_get, Swig_var_COctreeVoxelMesh_FaceZ_max_set);
+  SWIG_addvarlink(SWIG_globals(),(char*)"COctreeVoxelMesh_gTextile",Swig_var_COctreeVoxelMesh_gTextile_get, Swig_var_COctreeVoxelMesh_gTextile_set);
+  SWIG_addvarlink(SWIG_globals(),(char*)"COctreeVoxelMesh_g_DomainAABB",Swig_var_COctreeVoxelMesh_g_DomainAABB_get, Swig_var_COctreeVoxelMesh_g_DomainAABB_set);
 #if PY_VERSION_HEX >= 0x03000000
   return m;
 #else
--- VoxelMesh.h
+++ VoxelMesh.h
@@ -73,7 +73,7 @@ namespace TexGen
 		/**
 		\ return Maximum element index
 		*/
-		int OutputHexElements(ostream &Output, bool bOutputMatrix, bool bOutputYarn, bool bAbaqus = true );
+		virtual int OutputHexElements(ostream &Output, bool bOutputMatrix, bool bOutputYarn, bool bAbaqus = true );
 		/// Outputs yarn orientations and element sets to .ori and .eld files
 		void OutputOrientationsAndElementSets( string Filename, ostream &Output );
 		/// Outputs all elements when only outputting matrix
--- OctreeVoxelMesh.h
+++ OctreeVoxelMesh.h
@@ -75,7 +75,8 @@ namespace TexGen
 		static vector< vector<int> > FaceZ_max;
 
 		static CTextile gTextile;
-		static pair<XYZ, XYZ>	g_DomainAABB;
+		static pair<XYZ, XYZ> g_DomainAABB;
+		static vector<char> materialInfo; 
 
 		/** Save Octree-refined mesh with an option of surface smoothing
 		\param int min_level
@@ -130,13 +131,17 @@ namespace TexGen
 		void fillMaterialInfo();
 		int isBoundary(double p[3]);
 
+		void storePointInfo(int refineLevel);
+		static int getPointsInfo(vector<XYZ> myPoints, int refineLevel);
+
+		//int refine_fn_uni(p4est_t * p4est, p4est_topidx_t which_tree, p4est_quadrant_t * quadrant);
 		static int refine_fn_uni(p4est_t * p4est, p4est_topidx_t which_tree, p4est_quadrant_t * quadrant);
 		static int refine_fn_periodic(p4est_t * p4est, p4est_topidx_t which_tree, p4est_quadrant_t * quadrant);
 		static int refine_fn_post(p4est_t * p4est, p4est_topidx_t which_tree, p4est_quadrant_t * quadrant);
 		static int refine_fn(p4est_t * p4est, p4est_topidx_t which_tree, p4est_quadrant_t * quadrant);
 
-		void extractSurfaceNodeSets(std::map< int, vector<int> > &NodeSurf, vector<int> &AllSurf);
-		void OutputSurfaces(const std::map<int, vector<int> > &NodeSurf, const vector<int> &AllSurf);
+		void extractSurfaceNodeSets(std::map< int, vector<int> > &NodeSurf, std::vector<int> &AllSurf);
+		void OutputSurfaces(const std::map<int, vector<int> > &NodeSurf, const std::vector<int> &AllSurf);
 		
 		p4est_t *p4est;
 		p4est_connectivity_t *conn;
@@ -153,6 +158,7 @@ namespace TexGen
 		vector< vector<int> > MaterialElements;
 		vector<Point> boundaryPoints;
 
+
 		bool bSmooth;
 		bool bSurface;
 		bool bCohesive;
--- VoxelExportTests.cpp
+++ VoxelExportTests.cpp
@@ -53,4 +53,15 @@ void CVoxelExportTests::TestRotatedExport()
 	Vox.SaveVoxelMesh(Textile,"RotatedVoxelMeshTest",10,10,10,true,true, ROTATED_BC );
 	// Compare to template file
 	CPPUNIT_ASSERT(CompareFiles("RotatedVoxelMeshTest.inp","..\\..\\UnitTests\\RotatedVoxelMeshTest.inp"));
+}
+
+void CVoxelExportTests::TestOctreeExport()
+{
+	CTextile Textile = m_TextileFactory.GetSingleYarn(3, 20);
+
+	COctreeVoxelMesh Vox;
+	// Save yarns and matrix
+	Vox.SaveVoxelMesh(Textile,"OctreeVoxelMeshTest", 5, 6, true, 10, 0.3, 0.3, false, false );
+	// Compare to template file
+	CPPUNIT_ASSERT(CompareFiles("OctreeVoxelMeshTest.inp","..\\..\\UnitTests\\OctreeVoxelMeshTest.inp"));
 }--- VoxelExportTests.h
+++ VoxelExportTests.h
@@ -29,6 +29,7 @@ class CVoxelExportTests : public CppUnit::TestFixture
 	CPPUNIT_TEST_SUITE(CVoxelExportTests);
 	CPPUNIT_TEST(TestContinuumExport);
 	CPPUNIT_TEST(TestRotatedExport);
+	CPPUNIT_TEST(TestOctreeExport);
 	CPPUNIT_TEST_SUITE_END();
 
 public:
@@ -38,6 +39,7 @@ public:
 protected:
 	void TestContinuumExport();
 	void TestRotatedExport();
+	void TestOctreeExport();
 
 	CTextileFactory m_TextileFactory;
 };--- OctreeVoxelMesh.h
+++ OctreeVoxelMesh.h
@@ -127,7 +127,7 @@ namespace TexGen
 		/// Storing hanging nodes from octree-mesh to a vector for writing the constraints
 		int storeHangingNode(int *all_lni, int *hanging_corner, int node_i, int hanging_count);
 		/// Smoothing
-		void smoothing(const std::map< int, vector<int> > &NodeSurf, const vector<int> &AllSurf, int iter, double smoothCoef1, double smoothCoef2);
+		void smoothing(const std::map< int, vector<int> > &NodeSurf, const vector<int> &AllSurf);
 		void fillMaterialInfo();
 		int isBoundary(double p[3]);
 
@@ -140,6 +140,8 @@ namespace TexGen
 		static int refine_fn_post(p4est_t * p4est, p4est_topidx_t which_tree, p4est_quadrant_t * quadrant);
 		static int refine_fn(p4est_t * p4est, p4est_topidx_t which_tree, p4est_quadrant_t * quadrant);
 
+		static void FindLocMinMax( int& XMin, int& XMax, int& YMin, int& YMax, XYZ& Min, XYZ& Max );
+
 		void extractSurfaceNodeSets(std::map< int, vector<int> > &NodeSurf, std::vector<int> &AllSurf);
 		void OutputSurfaces(const std::map<int, vector<int> > &NodeSurf, const std::vector<int> &AllSurf);
 		
@@ -156,13 +158,13 @@ namespace TexGen
 		map<int, vector< pair<int, int> > > SurfaceElementFaces;
 
 		vector< vector<int> > MaterialElements;
-		vector<Point> boundaryPoints;
+		vector<Point> m_boundaryPoints;
 
 
-		bool bSmooth;
-		bool bSurface;
-		bool bCohesive;
-		double smoothCoef1, smoothCoef2;
-		int smoothIter;
+		bool m_bSmooth;
+		bool m_bSurface;
+		bool m_bCohesive;
+		double m_smoothCoef1, m_smoothCoef2;
+		int m_smoothIter;
 	};
 };	// namespace TexGen--- OctreeVoxelMesh.h
+++ OctreeVoxelMesh.h
@@ -148,16 +148,16 @@ namespace TexGen
 		p4est_t *p4est;
 		p4est_connectivity_t *conn;
 
-		std::map<int,XYZ> AllNodes;
-		std::vector< std::vector<int> > AllElements;
-		std::map< int, vector<int> > NodeConstraints;
-		std::map< int, vector<int> > NodesEncounter;
-		std::map< int, vector<int> > NeighbourNodes;
+		map<int,XYZ> AllNodes;
+		vector< std::vector<int> > AllElements;
+		map< int, vector<int> > NodeConstraints;
+		map< int, vector<int> > NodesEncounter;
+		map< int, vector<int> > m_NeighbourNodes;
 
-		std::map< int, vector<int> > SurfaceNodes;
-		map<int, vector< pair<int, int> > > SurfaceElementFaces;
+		map< int, vector<int> > m_SurfaceNodes;
+		map<int, vector< pair<int, int> > > m_SurfaceElementFaces;
 
-		vector< vector<int> > MaterialElements;
+		//vector< vector<int> > MaterialElements;
 		vector<Point> m_boundaryPoints;
 
 
--- OctreeVoxelMesh.h
+++ OctreeVoxelMesh.h
@@ -131,6 +131,9 @@ namespace TexGen
 		void fillMaterialInfo();
 		int isBoundary(double p[3]);
 
+		int checkIndex(int currentElement, vector<int> nodes, const vector< vector<int> > &AllElements); 
+		pair<int, vector<int> > GetFaceIndices2(CMesh::ELEMENT_TYPE ElemType, const set<int> &NodeIndices, int currentElement, const vector< vector<int> > &AllElements);
+
 		void storePointInfo(int refineLevel);
 		static int getPointsInfo(vector<XYZ> myPoints, int refineLevel);
 
@@ -151,7 +154,7 @@ namespace TexGen
 		map<int,XYZ> AllNodes;
 		vector< std::vector<int> > AllElements;
 		map< int, vector<int> > NodeConstraints;
-		map< int, vector<int> > NodesEncounter;
+		map< int, vector<int> > m_NodesEncounter;
 		map< int, vector<int> > m_NeighbourNodes;
 
 		map< int, vector<int> > m_SurfaceNodes;
--- OctreeVoxelMesh.h
+++ OctreeVoxelMesh.h
@@ -131,8 +131,8 @@ namespace TexGen
 		void fillMaterialInfo();
 		int isBoundary(double p[3]);
 
-		int checkIndex(int currentElement, vector<int> nodes, const vector< vector<int> > &AllElements); 
-		pair<int, vector<int> > GetFaceIndices2(CMesh::ELEMENT_TYPE ElemType, const set<int> &NodeIndices, int currentElement, const vector< vector<int> > &AllElements);
+		int checkIndex(int currentElement, vector<int> nodes); 
+		pair<int, vector<int> > GetFaceIndices2(CMesh::ELEMENT_TYPE ElemType, const set<int> &NodeIndices, int currentElement);
 
 		void storePointInfo(int refineLevel);
 		static int getPointsInfo(vector<XYZ> myPoints, int refineLevel);
@@ -152,8 +152,8 @@ namespace TexGen
 		p4est_connectivity_t *conn;
 
 		map<int,XYZ> AllNodes;
-		vector< std::vector<int> > AllElements;
-		map< int, vector<int> > NodeConstraints;
+		vector< std::vector<int> > m_AllElements;
+		map< int, vector<int> > m_NodeConstraints;
 		map< int, vector<int> > m_NodesEncounter;
 		map< int, vector<int> > m_NeighbourNodes;
 
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -39,11 +39,15 @@ ENDIF(WIN32)
 ADD_DEFINITIONS(-DEXPORT)
 
 IF(WIN32)
-TARGET_LINK_LIBRARIES(TexGenCore Triangle Octree TinyXML CSparse tetgenlib)
+TARGET_LINK_LIBRARIES(TexGenCore Triangle Octree TinyXML CSparse tetgenlib
+../../OctreeRefinement/libmylib_sc_w64.lib
+../../OctreeRefinement/libmylib_w64.lib)
 ELSE(WIN32)
 TARGET_LINK_LIBRARIES(TexGenCore Triangle Octree TinyXML CSparse tetgenlib)
 ENDIF(WIN32)
 
+INCLUDE_DIRECTORIES(../../OctreeRefinement/Include)
+
 INCLUDE(../Python/FindPythonSitePackages.cmake)
 IF(WIN32)
 	INSTALL(TARGETS TexGenCore
--- Core_wrap.cxx
+++ Core_wrap.cxx
@@ -103509,6 +103509,37 @@ fail:
 }
 
 
+SWIGINTERN PyObject *_wrap_CTextile3DWeave_GetXYarnIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0;
+  TexGen::CTextile3DWeave *arg1 = (TexGen::CTextile3DWeave *) 0 ;
+  int arg2 ;
+  void *argp1 = 0 ;
+  int res1 = 0 ;
+  int val2 ;
+  int ecode2 = 0 ;
+  PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ;
+  int result;
+  
+  if (!PyArg_ParseTuple(args,(char *)"OO:CTextile3DWeave_GetXYarnIndex",&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TexGen__CTextile3DWeave, 0 |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CTextile3DWeave_GetXYarnIndex" "', argument " "1"" of type '" "TexGen::CTextile3DWeave *""'"); 
+  }
+  arg1 = reinterpret_cast< TexGen::CTextile3DWeave * >(argp1);
+  ecode2 = SWIG_AsVal_int(obj1, &val2);
+  if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CTextile3DWeave_GetXYarnIndex" "', argument " "2"" of type '" "int""'");
+  } 
+  arg2 = static_cast< int >(val2);
+  result = (int)(arg1)->GetXYarnIndex(arg2);
+  resultobj = SWIG_From_int(static_cast< int >(result));
+  return resultobj;
+fail:
+  return NULL;
+}
+
+
 SWIGINTERN PyObject *_wrap_CTextile3DWeave_FindNextCellIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
   PyObject *resultobj = 0;
   TexGen::CTextile3DWeave *arg1 = (TexGen::CTextile3DWeave *) 0 ;
@@ -135242,6 +135273,7 @@ static PyMethodDef SwigMethods[] = {
 	 { (char *)"CTextile3DWeave_GetNumBinderLayers", _wrap_CTextile3DWeave_GetNumBinderLayers, METH_VARARGS, NULL},
 	 { (char *)"CTextile3DWeave_GetWarpYarnInfo", _wrap_CTextile3DWeave_GetWarpYarnInfo, METH_VARARGS, NULL},
 	 { (char *)"CTextile3DWeave_IsBinderYarn", _wrap_CTextile3DWeave_IsBinderYarn, METH_VARARGS, NULL},
+	 { (char *)"CTextile3DWeave_GetXYarnIndex", _wrap_CTextile3DWeave_GetXYarnIndex, METH_VARARGS, NULL},
 	 { (char *)"CTextile3DWeave_FindNextCellIndex", _wrap_CTextile3DWeave_FindNextCellIndex, METH_VARARGS, NULL},
 	 { (char *)"CTextile3DWeave_FindNextYCellIndex", _wrap_CTextile3DWeave_FindNextYCellIndex, METH_VARARGS, NULL},
 	 { (char *)"CTextile3DWeave_FindPrevYCellIndex", _wrap_CTextile3DWeave_FindPrevYCellIndex, METH_VARARGS, NULL},
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -40,13 +40,13 @@ ADD_DEFINITIONS(-DEXPORT)
 
 IF(WIN32)
 TARGET_LINK_LIBRARIES(TexGenCore Triangle Octree TinyXML CSparse tetgenlib
-../../OctreeRefinement/libmylib_sc_w64.lib
-../../OctreeRefinement/libmylib_w64.lib)
+${CMAKE_CURRENT_SOURCE_DIR}/../../OctreeRefinement/libmylib_sc_w64
+${CMAKE_CURRENT_SOURCE_DIR}/../../OctreeRefinement/libmylib_w64)
 ELSE(WIN32)
 TARGET_LINK_LIBRARIES(TexGenCore Triangle Octree TinyXML CSparse tetgenlib)
 ENDIF(WIN32)
 
-INCLUDE_DIRECTORIES(../../OctreeRefinement/Include)
+INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../../OctreeRefinement/Include)
 
 INCLUDE(../Python/FindPythonSitePackages.cmake)
 IF(WIN32)
--- OctreeVoxelMesh.cpp
+++ OctreeVoxelMesh.cpp
@@ -90,24 +90,6 @@ int my_comparison(double x, double y)
 		return 0;
 }
 
-// Boundaries are in format:
-int COctreeVoxelMesh::isBoundary(double point[3]) 
-{
-	if ( my_comparison(point[0], m_DomainAABB.first.x) || my_comparison(point[0], m_DomainAABB.second.x)) {
-		return 1;
-	} else {
-		if ( my_comparison(point[1], m_DomainAABB.first.y) || my_comparison(point[1], m_DomainAABB.second.y)) {
-			return 1;
-		} else {
-			if ( my_comparison(point[2], m_DomainAABB.first.z) || my_comparison(point[2], m_DomainAABB.second.z)) {
-				return 1;
-			} else {
-				return 0;
-			}
-		}
-	}
-}
-
 // This function comes from a p4est example. It decodes tree information to node numbering.
 // I still have no idea how exactly it works :)
 static int
@@ -157,6 +139,168 @@ int duplicatedHangingNode(double vxyz[3], double hang_coord[8][3], int hang_nums
 	return -1;
 }
 
+pair<int, int> most_common(vector<int> v) {
+	int currentVal = v[0];
+	int currentCount = 0;
+	int mostVal = v[0];
+	int mostCount = 0;
+
+	for (int i = 0; i < v.size(); i++) {
+		int c = count(v.begin(), v.end(), v[i]);
+		if (c > mostCount) {
+			mostCount = c;
+			mostVal = v[i];
+		}
+	}
+
+	return make_pair(mostVal, mostCount);
+}
+
+// P4EST should be initialised with initial coordinates of the unit cell vertices
+// TODO: Try to initialise P4EST with several elements to have better refinement in a certain direction
+int writeTempFile(string filename, pair<XYZ, XYZ> myDomain) 
+{
+	ofstream TempFile(filename);
+	if (!TempFile) {
+		TGERROR("Cannot create an initialisation *.inp file " << filename);
+		return -1;
+	}
+	TempFile << "*HEADING" << endl;
+	TempFile << "This is a temp input for the octree refinement" << endl;
+	TempFile << "*NODE" << endl;
+	TempFile << "1, " << myDomain.first.x<< ", " << myDomain.first.y << ", " << myDomain.first.z << endl;
+	TempFile << "2, " << myDomain.second.x<< ", " << myDomain.first.y << ", " << myDomain.first.z << endl;
+	TempFile << "3, " << myDomain.first.x<< ", " << myDomain.second.y << ", " << myDomain.first.z << endl;
+	TempFile << "4, " << myDomain.second.x<< ", " << myDomain.second.y << ", " << myDomain.first.z << endl;
+
+	TempFile << "5, " << myDomain.first.x <<", " << myDomain.first.y << ", " << myDomain.second.z << endl;
+	TempFile << "6, " << myDomain.second.x<< ", " << myDomain.first.y << ", " << myDomain.second.z << endl;
+	TempFile << "7, " << myDomain.first.x<< ", " << myDomain.second.y << ", " << myDomain.second.z << endl;
+	TempFile << "8, " << myDomain.second.x<< ", " << myDomain.second.y << ", " << myDomain.second.z << endl;
+
+	TempFile << "*ELEMENT,TYPE=C3D8R" << endl;
+	TempFile << "1, 5, 7, 3, 1, 6, 8, 4, 2" << endl;
+	TempFile.close();
+	return 0;
+}
+
+vector<int> GetFaceIndices(CMesh::ELEMENT_TYPE ElemType, const set<int> &NodeIndices)
+{
+	vector<int> facesInd;
+	int numFaces = 0;
+	if (NodeIndices.size() == 5)
+		numFaces = 1;
+	if (NodeIndices.size() == 6)
+		numFaces = 2;
+	if (NodeIndices.size() == 7)
+		numFaces = 3;
+
+	// We are in trouble! All the nodes belong to a surface. There is no way to find out which element faces are on surface
+	if (NodeIndices.size() == 8) {
+		return facesInd;
+	}
+
+	int i = 0, k = 0;
+	while (i < numFaces) {
+		if (NodeIndices.count(0) && NodeIndices.count(1) && NodeIndices.count(2) && NodeIndices.count(3))
+			facesInd.push_back(0), i++;
+		if (NodeIndices.count(4) && NodeIndices.count(5) && NodeIndices.count(6) && NodeIndices.count(7))
+			facesInd.push_back(1), i++;
+		if (NodeIndices.count(0) && NodeIndices.count(1) && NodeIndices.count(4) && NodeIndices.count(5))
+			facesInd.push_back(2), i++;
+		if (NodeIndices.count(1) && NodeIndices.count(2) && NodeIndices.count(5) && NodeIndices.count(6))
+			facesInd.push_back(3), i++;
+		if (NodeIndices.count(2) && NodeIndices.count(3) && NodeIndices.count(6) && NodeIndices.count(7))
+			facesInd.push_back(4), i++;
+		if (NodeIndices.count(3) && NodeIndices.count(0) && NodeIndices.count(7) && NodeIndices.count(4))
+			facesInd.push_back(5), i++;
+		if (k++ > numFaces) {
+			// No faces found
+			return facesInd;
+		}
+	}
+
+	return facesInd;
+}
+
+int GetFaceIndex(CMesh::ELEMENT_TYPE ElemType, const set<int> &NodeIndices)
+{
+	// Face indices taken from abaqus manual 22.1.4 Three-dimensional solid element library
+	switch (ElemType)
+	{
+	case CMesh::HEX:
+		if (NodeIndices.count(0) && NodeIndices.count(1) && NodeIndices.count(2) && NodeIndices.count(3))
+			return 0;
+		if (NodeIndices.count(4) && NodeIndices.count(5) && NodeIndices.count(6) && NodeIndices.count(7))
+			return 1;
+		if (NodeIndices.count(0) && NodeIndices.count(1) && NodeIndices.count(4) && NodeIndices.count(5))
+			return 2;
+		if (NodeIndices.count(1) && NodeIndices.count(2) && NodeIndices.count(5) && NodeIndices.count(6))
+			return 3;
+		if (NodeIndices.count(2) && NodeIndices.count(3) && NodeIndices.count(6) && NodeIndices.count(7))
+			return 4;
+		if (NodeIndices.count(3) && NodeIndices.count(0) && NodeIndices.count(7) && NodeIndices.count(4))
+			return 5;
+		break;
+	}
+	assert(false);
+	return -1;
+}
+
+set<int> GetCommonIndices(const vector<int> &SurfIndices, const vector<int> &VolIndices)
+{
+	set<int> Common;
+	vector<int>::const_iterator itSurf;
+	vector<int>::const_iterator itVol;
+	int i;
+	for (itSurf = SurfIndices.begin(); itSurf != SurfIndices.end(); ++itSurf)
+	{
+		for (itVol = VolIndices.begin(), i=0; itVol != VolIndices.end(); ++itVol, ++i)
+		{
+			if (*itSurf == *itVol)
+			{
+				Common.insert(i);
+			}
+		}
+	}
+	return Common;
+}
+
+COctreeVoxelMesh::COctreeVoxelMesh(string Type)
+:CVoxelMesh(Type)
+{
+}
+
+COctreeVoxelMesh::~COctreeVoxelMesh(void)
+{
+	p4est_destroy (p4est);
+	TGLOG("P4est object destroyed");
+	p4est_connectivity_destroy (conn);
+	TGLOG("Connectivity destoyed");
+	m_ElementsInfo.clear();
+	//Centre
+}
+
+// Boundaries are in format:
+int COctreeVoxelMesh::isBoundary(double point[3]) 
+{
+	if ( my_comparison(point[0], m_DomainAABB.first.x) || my_comparison(point[0], m_DomainAABB.second.x)) {
+		return 1;
+	} else {
+		if ( my_comparison(point[1], m_DomainAABB.first.y) || my_comparison(point[1], m_DomainAABB.second.y)) {
+			return 1;
+		} else {
+			if ( my_comparison(point[2], m_DomainAABB.first.z) || my_comparison(point[2], m_DomainAABB.second.z)) {
+				return 1;
+			} else {
+				return 0;
+			}
+		}
+	}
+}
+
+
+
 // This node is hanging and DOES NOT have a proper number, the master nodes should be stored
 // Number of node which is hanging is hanging_corner[i]
 int COctreeVoxelMesh::storeHangingNode(int *all_lni, int *hanging_corner, int node_i, int hanging_count) 
@@ -633,23 +777,6 @@ int COctreeVoxelMesh::refine_fn_post(p4est_t * p4est, p4est_topidx_t which_tree,
 	return 0;
 }
 
-pair<int, int> most_common(vector<int> v) {
-	int currentVal = v[0];
-	int currentCount = 0;
-	int mostVal = v[0];
-	int mostCount = 0;
-
-	for (int i = 0; i < v.size(); i++) {
-		int c = count(v.begin(), v.end(), v[i]);
-		if (c > mostCount) {
-			mostCount = c;
-			mostVal = v[i];
-		}
-	}
-
-	return make_pair(mostVal, mostCount);
-}
-
 // Return 1 is at least one of the points is not the same material as others
 // Return 0 is all the points are from the same materials
 int COctreeVoxelMesh::getPointsInfo(vector<XYZ> myPoints, int refineLevel)
@@ -788,34 +915,6 @@ void COctreeVoxelMesh::fillMaterialInfo() {
 	}
 }
 
-// P4EST should be initialised with initial coordinates of the unit cell vertices
-// TODO: Try to initialise P4EST with several elements to have better refinement in a certain direction
-int writeTempFile(string filename, pair<XYZ, XYZ> myDomain) 
-{
-	ofstream TempFile(filename);
-	if (!TempFile) {
-		TGERROR("Cannot create an initialisation *.inp file " << filename);
-		return -1;
-	}
-	TempFile << "*HEADING" << endl;
-	TempFile << "This is a temp input for the octree refinement" << endl;
-	TempFile << "*NODE" << endl;
-	TempFile << "1, " << myDomain.first.x<< ", " << myDomain.first.y << ", " << myDomain.first.z << endl;
-	TempFile << "2, " << myDomain.second.x<< ", " << myDomain.first.y << ", " << myDomain.first.z << endl;
-	TempFile << "3, " << myDomain.first.x<< ", " << myDomain.second.y << ", " << myDomain.first.z << endl;
-	TempFile << "4, " << myDomain.second.x<< ", " << myDomain.second.y << ", " << myDomain.first.z << endl;
-
-	TempFile << "5, " << myDomain.first.x <<", " << myDomain.first.y << ", " << myDomain.second.z << endl;
-	TempFile << "6, " << myDomain.second.x<< ", " << myDomain.first.y << ", " << myDomain.second.z << endl;
-	TempFile << "7, " << myDomain.first.x<< ", " << myDomain.second.y << ", " << myDomain.second.z << endl;
-	TempFile << "8, " << myDomain.second.x<< ", " << myDomain.second.y << ", " << myDomain.second.z << endl;
-
-	TempFile << "*ELEMENT,TYPE=C3D8R" << endl;
-	TempFile << "1, 5, 7, 3, 1, 6, 8, 4, 2" << endl;
-	TempFile.close();
-	return 0;
-}
-
 int COctreeVoxelMesh::CreateP4ESTRefinement(int min_level, int refine_level) 
 {
 	// The MPI is not included in TexGen - initialise dummy mpi objects for purpose of P4EST
@@ -888,11 +987,6 @@ int COctreeVoxelMesh::CreateP4ESTRefinement(int min_level, int refine_level)
 	return 0;
 }
 
-COctreeVoxelMesh::COctreeVoxelMesh(string Type)
-:CVoxelMesh(Type)
-{
-}
-
 void COctreeVoxelMesh::SaveVoxelMesh(CTextile &Textile, string OutputFilename, int min_level, int refine_level, bool smoothing, int iter, double s1, double s2, bool surfaceOutput, bool cohesive)
 {
 	CTimer timer;
@@ -929,16 +1023,6 @@ void COctreeVoxelMesh::SaveVoxelMesh(CTextile &Textile, string OutputFilename, i
 	timer.stop();
 }
 
-COctreeVoxelMesh::~COctreeVoxelMesh(void)
-{
-	p4est_destroy (p4est);
-	TGLOG("P4est object destroyed");
-	p4est_connectivity_destroy (conn);
-	TGLOG("Connectivity destoyed");
-	m_ElementsInfo.clear();
-	//Centre
-}
-
 bool COctreeVoxelMesh::CalculateVoxelSizes(CTextile &Textile)
 {
 	return true;
@@ -1143,70 +1227,6 @@ void COctreeVoxelMesh::OutputNodes(ostream &Output, CTextile &Textile, bool bAba
 	//timer.stop();
 }
 
-
-int GetFaceIndex(CMesh::ELEMENT_TYPE ElemType, const set<int> &NodeIndices)
-{
-	// Face indices taken from abaqus manual 22.1.4 Three-dimensional solid element library
-	switch (ElemType)
-	{
-	case CMesh::HEX:
-		if (NodeIndices.count(0) && NodeIndices.count(1) && NodeIndices.count(2) && NodeIndices.count(3))
-			return 0;
-		if (NodeIndices.count(4) && NodeIndices.count(5) && NodeIndices.count(6) && NodeIndices.count(7))
-			return 1;
-		if (NodeIndices.count(0) && NodeIndices.count(1) && NodeIndices.count(4) && NodeIndices.count(5))
-			return 2;
-		if (NodeIndices.count(1) && NodeIndices.count(2) && NodeIndices.count(5) && NodeIndices.count(6))
-			return 3;
-		if (NodeIndices.count(2) && NodeIndices.count(3) && NodeIndices.count(6) && NodeIndices.count(7))
-			return 4;
-		if (NodeIndices.count(3) && NodeIndices.count(0) && NodeIndices.count(7) && NodeIndices.count(4))
-			return 5;
-		break;
-	}
-	assert(false);
-	return -1;
-}
-
-vector<int> GetFaceIndices(CMesh::ELEMENT_TYPE ElemType, const set<int> &NodeIndices)
-{
-	vector<int> facesInd;
-	int numFaces = 0;
-	if (NodeIndices.size() == 5)
-		numFaces = 1;
-	if (NodeIndices.size() == 6)
-		numFaces = 2;
-	if (NodeIndices.size() == 7)
-		numFaces = 3;
-
-	// We are in trouble! All the nodes belong to a surface. There is no way to find out which element faces are on surface
-	if (NodeIndices.size() == 8) {
-		return facesInd;
-	}
-
-	int i = 0, k = 0;
-	while (i < numFaces) {
-		if (NodeIndices.count(0) && NodeIndices.count(1) && NodeIndices.count(2) && NodeIndices.count(3))
-			facesInd.push_back(0), i++;
-		if (NodeIndices.count(4) && NodeIndices.count(5) && NodeIndices.count(6) && NodeIndices.count(7))
-			facesInd.push_back(1), i++;
-		if (NodeIndices.count(0) && NodeIndices.count(1) && NodeIndices.count(4) && NodeIndices.count(5))
-			facesInd.push_back(2), i++;
-		if (NodeIndices.count(1) && NodeIndices.count(2) && NodeIndices.count(5) && NodeIndices.count(6))
-			facesInd.push_back(3), i++;
-		if (NodeIndices.count(2) && NodeIndices.count(3) && NodeIndices.count(6) && NodeIndices.count(7))
-			facesInd.push_back(4), i++;
-		if (NodeIndices.count(3) && NodeIndices.count(0) && NodeIndices.count(7) && NodeIndices.count(4))
-			facesInd.push_back(5), i++;
-		if (k++ > numFaces) {
-			// No faces found
-			return facesInd;
-		}
-	}
-
-	return facesInd;
-}
-
 int COctreeVoxelMesh::checkIndex(int currentElement, vector<int> nodes) 
 {
 	vector<int> elems;
@@ -1332,25 +1352,6 @@ pair<int, vector<int> > COctreeVoxelMesh::GetFaceIndices2(CMesh::ELEMENT_TYPE El
 	return make_pair(numFaces, facesInd);
 }
 
-set<int> GetCommonIndices(const vector<int> &SurfIndices, const vector<int> &VolIndices)
-{
-	set<int> Common;
-	vector<int>::const_iterator itSurf;
-	vector<int>::const_iterator itVol;
-	int i;
-	for (itSurf = SurfIndices.begin(); itSurf != SurfIndices.end(); ++itSurf)
-	{
-		for (itVol = VolIndices.begin(), i=0; itVol != VolIndices.end(); ++itVol, ++i)
-		{
-			if (*itSurf == *itVol)
-			{
-				Common.insert(i);
-			}
-		}
-	}
-	return Common;
-}
-
 // Populate sets of nodes which are at an interface and elements which have at least one onde at an interface
 void COctreeVoxelMesh::extractSurfaceNodeSets(map<int, vector<int>> &NodeSurf, vector<int> &AllSurf) {
 	int i;
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -1,6 +1,7 @@
 INCLUDE(FindOpenCascade.cmake)
 
 INCLUDE_DIRECTORIES(${OPENCASCADE_INCLUDE_DIR})
+INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../../OctreeRefinement/Include)
 
 ADD_LIBRARY(TexGenExport STATIC
 Exporter.cpp
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -34,6 +34,7 @@ FIND_PACKAGE(wxWidgets REQUIRED)
 FIND_PACKAGE(SWIG REQUIRED)
 FIND_PACKAGE(PythonLibs REQUIRED)
 
+INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../../OctreeRefinement/Include)
 INCLUDE_DIRECTORIES(${VTK_INCLUDE_DIRS} ${wxWidgets_INCLUDE_DIRS} ${PYTHON_INCLUDE_PATH})
 
 ADD_DEFINITIONS(${wxWidgets_DEFINITIONS})
@@ -125,9 +126,9 @@ IF(WIN32)
 
 # Install the manifest file if VS2008. Haven't found way to access at build time from installation to get input folder
 	IF(MSVC90 OR MSVC11)
-		INSTALL(FILES ${CMAKE_BINARY_DIR}/Debug/TexGenGUI.exe.manifest
+		INSTALL(FILES ${CMAKE_BINARY_DIR}/Release/TexGenGUI.exe.manifest
 		DESTINATION ${CMAKE_INSTALL_PREFIX})
-		INSTALL(FILES ${CMAKE_BINARY_DIR}/Debug/TexGenGUI.exe.manifest
+		INSTALL(FILES ${CMAKE_BINARY_DIR}/Release/TexGenGUI.exe.manifest
 		DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/../Installer)
 	ENDIF(MSVC90 OR MSVC11)	
 ELSE(WIN32)
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -10,6 +10,7 @@ IF(BUILD_PYTHON_INTERFACE)
 
 	# Set where to find the python header files
 	INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
+	INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../../OctreeRefinement/Include)
 
 	# Add the swig command to the build
 	ADD_CUSTOM_COMMAND(OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/Core_wrap.cxx"
--- Core_wrap.cxx
+++ Core_wrap.cxx
@@ -3441,7 +3441,6 @@ namespace Swig {
 #define SWIGTYPE_p_CObjectContainerT_TexGen__CSectionMesh_t swig_types[1]
 #define SWIGTYPE_p_CObjectContainerT_TexGen__CSection_t swig_types[2]
 #define SWIGTYPE_p_CObjectContainerT_TexGen__CYarnSection_t swig_types[3]
-<<<<<<< HEAD
 #define SWIGTYPE_p_SSIZE_T swig_types[4]
 #define SWIGTYPE_p_TexGen__CAdjustMeshInterference swig_types[5]
 #define SWIGTYPE_p_TexGen__CBasicVolumes swig_types[6]
@@ -3477,329 +3476,152 @@ namespace Swig {
 #define SWIGTYPE_p_TexGen__CPropertiesYarn swig_types[36]
 #define SWIGTYPE_p_TexGen__CProperty swig_types[37]
 #define SWIGTYPE_p_TexGen__CRectangularVoxelMesh swig_types[38]
-#define SWIGTYPE_p_TexGen__CSection swig_types[39]
-#define SWIGTYPE_p_TexGen__CSectionBezier swig_types[40]
-#define SWIGTYPE_p_TexGen__CSectionEllipse swig_types[41]
-#define SWIGTYPE_p_TexGen__CSectionHybrid swig_types[42]
-#define SWIGTYPE_p_TexGen__CSectionLenticular swig_types[43]
-#define SWIGTYPE_p_TexGen__CSectionMesh swig_types[44]
-#define SWIGTYPE_p_TexGen__CSectionMeshRectangleSection swig_types[45]
-#define SWIGTYPE_p_TexGen__CSectionMeshRectangular swig_types[46]
-#define SWIGTYPE_p_TexGen__CSectionMeshTriangulate swig_types[47]
-#define SWIGTYPE_p_TexGen__CSectionPolygon swig_types[48]
-#define SWIGTYPE_p_TexGen__CSectionPowerEllipse swig_types[49]
-#define SWIGTYPE_p_TexGen__CSectionRectangle swig_types[50]
-#define SWIGTYPE_p_TexGen__CSectionRotated swig_types[51]
-#define SWIGTYPE_p_TexGen__CSectionScaled swig_types[52]
-#define SWIGTYPE_p_TexGen__CShearedPeriodicBoundaries swig_types[53]
-#define SWIGTYPE_p_TexGen__CShearedTextileWeave2D swig_types[54]
-#define SWIGTYPE_p_TexGen__CShearedVoxelMesh swig_types[55]
-#define SWIGTYPE_p_TexGen__CSimulation swig_types[56]
-#define SWIGTYPE_p_TexGen__CSimulationAbaqus swig_types[57]
-#define SWIGTYPE_p_TexGen__CSingletonT_TexGen__CTexGen_t swig_types[58]
-#define SWIGTYPE_p_TexGen__CSlaveNode swig_types[59]
-#define SWIGTYPE_p_TexGen__CStaggeredPeriodicBoundaries swig_types[60]
-#define SWIGTYPE_p_TexGen__CStaggeredVoxelMesh swig_types[61]
-#define SWIGTYPE_p_TexGen__CTetgenMesh swig_types[62]
-#define SWIGTYPE_p_TexGen__CTexGen swig_types[63]
-#define SWIGTYPE_p_TexGen__CTextile swig_types[64]
-#define SWIGTYPE_p_TexGen__CTextile3DWeave swig_types[65]
-#define SWIGTYPE_p_TexGen__CTextileAngleInterlock swig_types[66]
-#define SWIGTYPE_p_TexGen__CTextileDeformer swig_types[67]
-#define SWIGTYPE_p_TexGen__CTextileDeformerVolumeMesh swig_types[68]
-#define SWIGTYPE_p_TexGen__CTextileLayerToLayer swig_types[69]
-#define SWIGTYPE_p_TexGen__CTextileLayered swig_types[70]
-#define SWIGTYPE_p_TexGen__CTextileMaterials swig_types[71]
-#define SWIGTYPE_p_TexGen__CTextileOffsetAngleInterlock swig_types[72]
-#define SWIGTYPE_p_TexGen__CTextileOrthogonal swig_types[73]
-#define SWIGTYPE_p_TexGen__CTextileWeave swig_types[74]
-#define SWIGTYPE_p_TexGen__CTextileWeave2D swig_types[75]
-#define SWIGTYPE_p_TexGen__CTextileWeave3D swig_types[76]
-#define SWIGTYPE_p_TexGen__CUMAT swig_types[77]
-#define SWIGTYPE_p_TexGen__CVoxelMesh swig_types[78]
-#define SWIGTYPE_p_TexGen__CYarn swig_types[79]
-#define SWIGTYPE_p_TexGen__CYarnSection swig_types[80]
-#define SWIGTYPE_p_TexGen__CYarnSectionConstant swig_types[81]
-#define SWIGTYPE_p_TexGen__CYarnSectionInterp swig_types[82]
-#define SWIGTYPE_p_TexGen__CYarnSectionInterpNode swig_types[83]
-#define SWIGTYPE_p_TexGen__CYarnSectionInterpPosition swig_types[84]
-#define SWIGTYPE_p_TexGen__ELEMENT_INDICES swig_types[85]
-#define SWIGTYPE_p_TexGen__LessPairDoubleInt swig_types[86]
-#define SWIGTYPE_p_TexGen__LessPairDoubleXYZ swig_types[87]
-#define SWIGTYPE_p_TexGen__MESHER_ELEMENT_DATA swig_types[88]
-#define SWIGTYPE_p_TexGen__PLANE swig_types[89]
-#define SWIGTYPE_p_TexGen__PLANEPARAMS swig_types[90]
-#define SWIGTYPE_p_TexGen__POINT_INFO swig_types[91]
-#define SWIGTYPE_p_TexGen__WXYZ swig_types[92]
-#define SWIGTYPE_p_TexGen__XY swig_types[93]
-#define SWIGTYPE_p_TexGen__XYZ swig_types[94]
-#define SWIGTYPE_p_TexGen__YARNDATA swig_types[95]
-#define SWIGTYPE_p_TexGen__YARN_POSITION_INFORMATION swig_types[96]
-#define SWIGTYPE_p_TiXmlElement swig_types[97]
-#define SWIGTYPE_p_allocator_type swig_types[98]
-#define SWIGTYPE_p_bool swig_types[99]
-#define SWIGTYPE_p_char swig_types[100]
-#define SWIGTYPE_p_const_reference swig_types[101]
-#define SWIGTYPE_p_difference_type swig_types[102]
-#define SWIGTYPE_p_double swig_types[103]
-#define SWIGTYPE_p_f_std__string_bool__void swig_types[104]
-#define SWIGTYPE_p_first_type swig_types[105]
-#define SWIGTYPE_p_int swig_types[106]
-#define SWIGTYPE_p_key_type swig_types[107]
-#define SWIGTYPE_p_mapped_type swig_types[108]
-#define SWIGTYPE_p_ostream swig_types[109]
-#define SWIGTYPE_p_p_PyObject swig_types[110]
-#define SWIGTYPE_p_reference swig_types[111]
-#define SWIGTYPE_p_second_type swig_types[112]
-#define SWIGTYPE_p_setT_int_t swig_types[113]
-#define SWIGTYPE_p_size_type swig_types[114]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CLinearTransformation_t swig_types[115]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CMeshDataBase_p_t swig_types[116]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CMesh_t swig_types[117]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CNode_t swig_types[118]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CSlaveNode_t swig_types[119]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CTextile_p_t swig_types[120]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CYarn_p_t swig_types[121]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CYarn_t swig_types[122]
-#define SWIGTYPE_p_std__allocatorT_TexGen__MESHER_ELEMENT_DATA_t swig_types[123]
-#define SWIGTYPE_p_std__allocatorT_TexGen__PLANE_t swig_types[124]
-#define SWIGTYPE_p_std__allocatorT_TexGen__POINT_INFO_t swig_types[125]
-#define SWIGTYPE_p_std__allocatorT_TexGen__XYZ_t swig_types[126]
-#define SWIGTYPE_p_std__allocatorT_TexGen__XY_t swig_types[127]
-#define SWIGTYPE_p_std__allocatorT_bool_t swig_types[128]
-#define SWIGTYPE_p_std__allocatorT_double_t swig_types[129]
-#define SWIGTYPE_p_std__allocatorT_float_t swig_types[130]
-#define SWIGTYPE_p_std__allocatorT_int_t swig_types[131]
-#define SWIGTYPE_p_std__allocatorT_std__pairT_double_TexGen__XYZ_t_t swig_types[132]
-#define SWIGTYPE_p_std__allocatorT_std__pairT_int_int_t_t swig_types[133]
-#define SWIGTYPE_p_std__allocatorT_std__pairT_std__string_const_TexGen__CTextile_p_t_t swig_types[134]
-#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[135]
-#define SWIGTYPE_p_std__invalid_argument swig_types[136]
-#define SWIGTYPE_p_std__istream swig_types[137]
-#define SWIGTYPE_p_std__lessT_std__string_t swig_types[138]
-#define SWIGTYPE_p_std__listT_TexGen__CYarn_std__allocatorT_TexGen__CYarn_t_t swig_types[139]
-#define SWIGTYPE_p_std__listT_TexGen__MESHER_ELEMENT_DATA_std__allocatorT_TexGen__MESHER_ELEMENT_DATA_t_t swig_types[140]
-#define SWIGTYPE_p_std__listT__Tp__Alloc_t swig_types[141]
-#define SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t swig_types[142]
-#define SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t swig_types[143]
-#define SWIGTYPE_p_std__mapT_std__string_TexGen__CTextile_p_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_TexGen__CTextile_p_t_t_t swig_types[144]
-#define SWIGTYPE_p_std__mapT_std__string_std__pairT_CObjectContainerT_TexGen__CMaterial_t_CObjectContainerT_TexGen__CMaterial_t_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__pairT_CObjectContainerT_TexGen__CMaterial_t_CObjectContainerT_TexGen__CMaterial_t_t_t_t_t swig_types[145]
-#define SWIGTYPE_p_std__ostream swig_types[146]
-#define SWIGTYPE_p_std__pairT_TexGen__XYZ_TexGen__XYZ_t swig_types[147]
-#define SWIGTYPE_p_std__pairT_bool_bool_t swig_types[148]
-#define SWIGTYPE_p_std__pairT_double_TexGen__XYZ_t swig_types[149]
-#define SWIGTYPE_p_std__pairT_double_int_t swig_types[150]
-#define SWIGTYPE_p_std__pairT_int_int_t swig_types[151]
-#define SWIGTYPE_p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_double_std__allocatorT_double_t_t_t swig_types[152]
-#define SWIGTYPE_p_std__string swig_types[153]
-#define SWIGTYPE_p_std__vectorT_TexGen__CLinearTransformation_std__allocatorT_TexGen__CLinearTransformation_t_t swig_types[154]
-#define SWIGTYPE_p_std__vectorT_TexGen__CMeshDataBase_p_std__allocatorT_TexGen__CMeshDataBase_p_t_t swig_types[155]
-#define SWIGTYPE_p_std__vectorT_TexGen__CMesh_std__allocatorT_TexGen__CMesh_t_t swig_types[156]
-#define SWIGTYPE_p_std__vectorT_TexGen__CNode_std__allocatorT_TexGen__CNode_t_t swig_types[157]
-#define SWIGTYPE_p_std__vectorT_TexGen__CSlaveNode_std__allocatorT_TexGen__CSlaveNode_t_t swig_types[158]
-#define SWIGTYPE_p_std__vectorT_TexGen__CTextile_p_std__allocatorT_TexGen__CTextile_p_t_t swig_types[159]
-#define SWIGTYPE_p_std__vectorT_TexGen__CYarn_p_std__allocatorT_TexGen__CYarn_p_t_t swig_types[160]
-#define SWIGTYPE_p_std__vectorT_TexGen__CYarn_std__allocatorT_TexGen__CYarn_t_t swig_types[161]
-#define SWIGTYPE_p_std__vectorT_TexGen__ELEMENT_INDICES_std__allocatorT_TexGen__ELEMENT_INDICES_t_t swig_types[162]
-#define SWIGTYPE_p_std__vectorT_TexGen__PLANE_std__allocatorT_TexGen__PLANE_t_t swig_types[163]
-#define SWIGTYPE_p_std__vectorT_TexGen__POINT_INFO_std__allocatorT_TexGen__POINT_INFO_t_t swig_types[164]
-#define SWIGTYPE_p_std__vectorT_TexGen__XYZ_std__allocatorT_TexGen__XYZ_t_t swig_types[165]
-#define SWIGTYPE_p_std__vectorT_TexGen__XY_std__allocatorT_TexGen__XY_t_t swig_types[166]
-#define SWIGTYPE_p_std__vectorT__Tp__Alloc_t swig_types[167]
-#define SWIGTYPE_p_std__vectorT__Tp_p__Alloc_t swig_types[168]
-#define SWIGTYPE_p_std__vectorT_bool__Alloc_t swig_types[169]
-#define SWIGTYPE_p_std__vectorT_bool_std__allocatorT_bool_t_t swig_types[170]
-#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[171]
-#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[172]
-#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[173]
-#define SWIGTYPE_p_std__vectorT_std__pairT_double_TexGen__XYZ_t_std__allocatorT_std__pairT_double_TexGen__XYZ_t_t_t swig_types[174]
-#define SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t swig_types[175]
-#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[176]
-#define SWIGTYPE_p_std__vectorT_std__vectorT_int_p_std__allocatorT_int_p_t_t_std__allocatorT_std__vectorT_int_p_std__allocatorT_int_p_t_t_t_t swig_types[177]
-#define SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t swig_types[178]
-#define SWIGTYPE_p_swig__SwigPyIterator swig_types[179]
-#define SWIGTYPE_p_value_type swig_types[180]
-static swig_type_info *swig_types[182];
-static swig_module_info swig_module = {swig_types, 181, 0, 0, 0, 0};
-=======
-#define SWIGTYPE_p_TexGen__CAdjustMeshInterference swig_types[4]
-#define SWIGTYPE_p_TexGen__CBasicVolumes swig_types[5]
-#define SWIGTYPE_p_TexGen__CDomain swig_types[6]
-#define SWIGTYPE_p_TexGen__CDomainPlanes swig_types[7]
-#define SWIGTYPE_p_TexGen__CFibreDistribution swig_types[8]
-#define SWIGTYPE_p_TexGen__CFibreDistribution1DQuad swig_types[9]
-#define SWIGTYPE_p_TexGen__CFibreDistributionConst swig_types[10]
-#define SWIGTYPE_p_TexGen__CGeometrySolver swig_types[11]
-#define SWIGTYPE_p_TexGen__CInterpolation swig_types[12]
-#define SWIGTYPE_p_TexGen__CInterpolationAdjusted swig_types[13]
-#define SWIGTYPE_p_TexGen__CInterpolationBezier swig_types[14]
-#define SWIGTYPE_p_TexGen__CInterpolationCubic swig_types[15]
-#define SWIGTYPE_p_TexGen__CInterpolationLinear swig_types[16]
-#define SWIGTYPE_p_TexGen__CKeywordMaterial swig_types[17]
-#define SWIGTYPE_p_TexGen__CLinearTransformation swig_types[18]
-#define SWIGTYPE_p_TexGen__CLogger swig_types[19]
-#define SWIGTYPE_p_TexGen__CMaterial swig_types[20]
-#define SWIGTYPE_p_TexGen__CMatrix swig_types[21]
-#define SWIGTYPE_p_TexGen__CMesh swig_types[22]
-#define SWIGTYPE_p_TexGen__CMeshDataBase swig_types[23]
-#define SWIGTYPE_p_TexGen__CMeshDataT_TexGen__XYZ_t swig_types[24]
-#define SWIGTYPE_p_TexGen__CMeshIntersectionData swig_types[25]
-#define SWIGTYPE_p_TexGen__CMesher swig_types[26]
-#define SWIGTYPE_p_TexGen__CMesherBase swig_types[27]
-#define SWIGTYPE_p_TexGen__CNode swig_types[28]
-#define SWIGTYPE_p_TexGen__COLOR swig_types[29]
-#define SWIGTYPE_p_TexGen__CPatternDraft swig_types[30]
-#define SWIGTYPE_p_TexGen__CPeriodicBoundaries swig_types[31]
-#define SWIGTYPE_p_TexGen__CProperties swig_types[32]
-#define SWIGTYPE_p_TexGen__CPropertiesTextile swig_types[33]
-#define SWIGTYPE_p_TexGen__CPropertiesYarn swig_types[34]
-#define SWIGTYPE_p_TexGen__CProperty swig_types[35]
-#define SWIGTYPE_p_TexGen__CRectangularVoxelMesh swig_types[36]
-#define SWIGTYPE_p_TexGen__CRotatedVoxelMesh swig_types[37]
-#define SWIGTYPE_p_TexGen__CSection swig_types[38]
-#define SWIGTYPE_p_TexGen__CSectionBezier swig_types[39]
-#define SWIGTYPE_p_TexGen__CSectionEllipse swig_types[40]
-#define SWIGTYPE_p_TexGen__CSectionHybrid swig_types[41]
-#define SWIGTYPE_p_TexGen__CSectionLenticular swig_types[42]
-#define SWIGTYPE_p_TexGen__CSectionMesh swig_types[43]
-#define SWIGTYPE_p_TexGen__CSectionMeshRectangleSection swig_types[44]
-#define SWIGTYPE_p_TexGen__CSectionMeshRectangular swig_types[45]
-#define SWIGTYPE_p_TexGen__CSectionMeshTriangulate swig_types[46]
-#define SWIGTYPE_p_TexGen__CSectionPolygon swig_types[47]
-#define SWIGTYPE_p_TexGen__CSectionPowerEllipse swig_types[48]
-#define SWIGTYPE_p_TexGen__CSectionRectangle swig_types[49]
-#define SWIGTYPE_p_TexGen__CSectionRotated swig_types[50]
-#define SWIGTYPE_p_TexGen__CSectionScaled swig_types[51]
-#define SWIGTYPE_p_TexGen__CShearedPeriodicBoundaries swig_types[52]
-#define SWIGTYPE_p_TexGen__CShearedTextileWeave2D swig_types[53]
-#define SWIGTYPE_p_TexGen__CShearedVoxelMesh swig_types[54]
-#define SWIGTYPE_p_TexGen__CSimulation swig_types[55]
-#define SWIGTYPE_p_TexGen__CSimulationAbaqus swig_types[56]
-#define SWIGTYPE_p_TexGen__CSingletonT_TexGen__CTexGen_t swig_types[57]
-#define SWIGTYPE_p_TexGen__CSlaveNode swig_types[58]
-#define SWIGTYPE_p_TexGen__CStaggeredPeriodicBoundaries swig_types[59]
-#define SWIGTYPE_p_TexGen__CStaggeredVoxelMesh swig_types[60]
-#define SWIGTYPE_p_TexGen__CTetgenMesh swig_types[61]
-#define SWIGTYPE_p_TexGen__CTexGen swig_types[62]
-#define SWIGTYPE_p_TexGen__CTextile swig_types[63]
-#define SWIGTYPE_p_TexGen__CTextile3DWeave swig_types[64]
-#define SWIGTYPE_p_TexGen__CTextileAngleInterlock swig_types[65]
-#define SWIGTYPE_p_TexGen__CTextileDeformer swig_types[66]
-#define SWIGTYPE_p_TexGen__CTextileDeformerVolumeMesh swig_types[67]
-#define SWIGTYPE_p_TexGen__CTextileLayerToLayer swig_types[68]
-#define SWIGTYPE_p_TexGen__CTextileLayered swig_types[69]
-#define SWIGTYPE_p_TexGen__CTextileMaterials swig_types[70]
-#define SWIGTYPE_p_TexGen__CTextileOffsetAngleInterlock swig_types[71]
-#define SWIGTYPE_p_TexGen__CTextileOrthogonal swig_types[72]
-#define SWIGTYPE_p_TexGen__CTextileWeave swig_types[73]
-#define SWIGTYPE_p_TexGen__CTextileWeave2D swig_types[74]
-#define SWIGTYPE_p_TexGen__CTextileWeave3D swig_types[75]
-#define SWIGTYPE_p_TexGen__CUMAT swig_types[76]
-#define SWIGTYPE_p_TexGen__CVoxelMesh swig_types[77]
-#define SWIGTYPE_p_TexGen__CYarn swig_types[78]
-#define SWIGTYPE_p_TexGen__CYarnSection swig_types[79]
-#define SWIGTYPE_p_TexGen__CYarnSectionConstant swig_types[80]
-#define SWIGTYPE_p_TexGen__CYarnSectionInterp swig_types[81]
-#define SWIGTYPE_p_TexGen__CYarnSectionInterpNode swig_types[82]
-#define SWIGTYPE_p_TexGen__CYarnSectionInterpPosition swig_types[83]
-#define SWIGTYPE_p_TexGen__ELEMENT_INDICES swig_types[84]
-#define SWIGTYPE_p_TexGen__LessPairDoubleInt swig_types[85]
-#define SWIGTYPE_p_TexGen__LessPairDoubleXYZ swig_types[86]
-#define SWIGTYPE_p_TexGen__MESHER_ELEMENT_DATA swig_types[87]
-#define SWIGTYPE_p_TexGen__PLANE swig_types[88]
-#define SWIGTYPE_p_TexGen__PLANEPARAMS swig_types[89]
-#define SWIGTYPE_p_TexGen__POINT_INFO swig_types[90]
-#define SWIGTYPE_p_TexGen__WXYZ swig_types[91]
-#define SWIGTYPE_p_TexGen__XY swig_types[92]
-#define SWIGTYPE_p_TexGen__XYZ swig_types[93]
-#define SWIGTYPE_p_TexGen__YARNDATA swig_types[94]
-#define SWIGTYPE_p_TexGen__YARN_POSITION_INFORMATION swig_types[95]
-#define SWIGTYPE_p_TiXmlElement swig_types[96]
-#define SWIGTYPE_p_allocator_type swig_types[97]
-#define SWIGTYPE_p_bool swig_types[98]
-#define SWIGTYPE_p_char swig_types[99]
-#define SWIGTYPE_p_const_reference swig_types[100]
-#define SWIGTYPE_p_difference_type swig_types[101]
-#define SWIGTYPE_p_double swig_types[102]
-#define SWIGTYPE_p_f_std__string_bool__void swig_types[103]
-#define SWIGTYPE_p_first_type swig_types[104]
-#define SWIGTYPE_p_int swig_types[105]
-#define SWIGTYPE_p_key_type swig_types[106]
-#define SWIGTYPE_p_mapped_type swig_types[107]
-#define SWIGTYPE_p_ostream swig_types[108]
-#define SWIGTYPE_p_p_PyObject swig_types[109]
-#define SWIGTYPE_p_reference swig_types[110]
-#define SWIGTYPE_p_second_type swig_types[111]
-#define SWIGTYPE_p_setT_int_t swig_types[112]
-#define SWIGTYPE_p_size_type swig_types[113]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CLinearTransformation_t swig_types[114]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CMeshDataBase_p_t swig_types[115]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CMesh_t swig_types[116]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CNode_t swig_types[117]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CSlaveNode_t swig_types[118]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CTextile_p_t swig_types[119]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CYarn_p_t swig_types[120]
-#define SWIGTYPE_p_std__allocatorT_TexGen__CYarn_t swig_types[121]
-#define SWIGTYPE_p_std__allocatorT_TexGen__MESHER_ELEMENT_DATA_t swig_types[122]
-#define SWIGTYPE_p_std__allocatorT_TexGen__PLANE_t swig_types[123]
-#define SWIGTYPE_p_std__allocatorT_TexGen__POINT_INFO_t swig_types[124]
-#define SWIGTYPE_p_std__allocatorT_TexGen__XYZ_t swig_types[125]
-#define SWIGTYPE_p_std__allocatorT_TexGen__XY_t swig_types[126]
-#define SWIGTYPE_p_std__allocatorT_bool_t swig_types[127]
-#define SWIGTYPE_p_std__allocatorT_double_t swig_types[128]
-#define SWIGTYPE_p_std__allocatorT_float_t swig_types[129]
-#define SWIGTYPE_p_std__allocatorT_int_t swig_types[130]
-#define SWIGTYPE_p_std__allocatorT_std__pairT_double_TexGen__XYZ_t_t swig_types[131]
-#define SWIGTYPE_p_std__allocatorT_std__pairT_int_int_t_t swig_types[132]
-#define SWIGTYPE_p_std__allocatorT_std__pairT_std__string_const_TexGen__CTextile_p_t_t swig_types[133]
-#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[134]
-#define SWIGTYPE_p_std__invalid_argument swig_types[135]
-#define SWIGTYPE_p_std__istream swig_types[136]
-#define SWIGTYPE_p_std__lessT_std__string_t swig_types[137]
-#define SWIGTYPE_p_std__listT_TexGen__CYarn_std__allocatorT_TexGen__CYarn_t_t swig_types[138]
-#define SWIGTYPE_p_std__listT_TexGen__MESHER_ELEMENT_DATA_std__allocatorT_TexGen__MESHER_ELEMENT_DATA_t_t swig_types[139]
-#define SWIGTYPE_p_std__listT__Tp__Alloc_t swig_types[140]
-#define SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t swig_types[141]
-#define SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t swig_types[142]
-#define SWIGTYPE_p_std__mapT_std__string_TexGen__CTextile_p_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_TexGen__CTextile_p_t_t_t swig_types[143]
-#define SWIGTYPE_p_std__mapT_std__string_std__pairT_CObjectContainerT_TexGen__CMaterial_t_CObjectContainerT_TexGen__CMaterial_t_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__pairT_CObjectContainerT_TexGen__CMaterial_t_CObjectContainerT_TexGen__CMaterial_t_t_t_t_t swig_types[144]
-#define SWIGTYPE_p_std__ostream swig_types[145]
-#define SWIGTYPE_p_std__pairT_TexGen__XYZ_TexGen__XYZ_t swig_types[146]
-#define SWIGTYPE_p_std__pairT_bool_bool_t swig_types[147]
-#define SWIGTYPE_p_std__pairT_double_TexGen__XYZ_t swig_types[148]
-#define SWIGTYPE_p_std__pairT_double_int_t swig_types[149]
-#define SWIGTYPE_p_std__pairT_int_int_t swig_types[150]
-#define SWIGTYPE_p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_double_std__allocatorT_double_t_t_t swig_types[151]
-#define SWIGTYPE_p_std__string swig_types[152]
-#define SWIGTYPE_p_std__vectorT_TexGen__CLinearTransformation_std__allocatorT_TexGen__CLinearTransformation_t_t swig_types[153]
-#define SWIGTYPE_p_std__vectorT_TexGen__CMeshDataBase_p_std__allocatorT_TexGen__CMeshDataBase_p_t_t swig_types[154]
-#define SWIGTYPE_p_std__vectorT_TexGen__CMesh_std__allocatorT_TexGen__CMesh_t_t swig_types[155]
-#define SWIGTYPE_p_std__vectorT_TexGen__CNode_std__allocatorT_TexGen__CNode_t_t swig_types[156]
-#define SWIGTYPE_p_std__vectorT_TexGen__CSlaveNode_std__allocatorT_TexGen__CSlaveNode_t_t swig_types[157]
-#define SWIGTYPE_p_std__vectorT_TexGen__CTextile_p_std__allocatorT_TexGen__CTextile_p_t_t swig_types[158]
-#define SWIGTYPE_p_std__vectorT_TexGen__CYarn_p_std__allocatorT_TexGen__CYarn_p_t_t swig_types[159]
-#define SWIGTYPE_p_std__vectorT_TexGen__CYarn_std__allocatorT_TexGen__CYarn_t_t swig_types[160]
-#define SWIGTYPE_p_std__vectorT_TexGen__ELEMENT_INDICES_std__allocatorT_TexGen__ELEMENT_INDICES_t_t swig_types[161]
-#define SWIGTYPE_p_std__vectorT_TexGen__PLANE_std__allocatorT_TexGen__PLANE_t_t swig_types[162]
-#define SWIGTYPE_p_std__vectorT_TexGen__POINT_INFO_std__allocatorT_TexGen__POINT_INFO_t_t swig_types[163]
-#define SWIGTYPE_p_std__vectorT_TexGen__XYZ_std__allocatorT_TexGen__XYZ_t_t swig_types[164]
-#define SWIGTYPE_p_std__vectorT_TexGen__XY_std__allocatorT_TexGen__XY_t_t swig_types[165]
-#define SWIGTYPE_p_std__vectorT__Tp__Alloc_t swig_types[166]
-#define SWIGTYPE_p_std__vectorT__Tp_p__Alloc_t swig_types[167]
-#define SWIGTYPE_p_std__vectorT_bool__Alloc_t swig_types[168]
-#define SWIGTYPE_p_std__vectorT_bool_std__allocatorT_bool_t_t swig_types[169]
-#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[170]
-#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[171]
-#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[172]
-#define SWIGTYPE_p_std__vectorT_std__pairT_double_TexGen__XYZ_t_std__allocatorT_std__pairT_double_TexGen__XYZ_t_t_t swig_types[173]
-#define SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t swig_types[174]
-#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[175]
-#define SWIGTYPE_p_std__vectorT_std__vectorT_int_p_std__allocatorT_int_p_t_t_std__allocatorT_std__vectorT_int_p_std__allocatorT_int_p_t_t_t_t swig_types[176]
-#define SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t swig_types[177]
-#define SWIGTYPE_p_swig__SwigPyIterator swig_types[178]
-#define SWIGTYPE_p_value_type swig_types[179]
-static swig_type_info *swig_types[181];
-static swig_module_info swig_module = {swig_types, 180, 0, 0, 0, 0};
+#define SWIGTYPE_p_TexGen__CRotatedVoxelMesh swig_types[39]
+#define SWIGTYPE_p_TexGen__CSection swig_types[40]
+#define SWIGTYPE_p_TexGen__CSectionBezier swig_types[41]
+#define SWIGTYPE_p_TexGen__CSectionEllipse swig_types[42]
+#define SWIGTYPE_p_TexGen__CSectionHybrid swig_types[43]
+#define SWIGTYPE_p_TexGen__CSectionLenticular swig_types[44]
+#define SWIGTYPE_p_TexGen__CSectionMesh swig_types[45]
+#define SWIGTYPE_p_TexGen__CSectionMeshRectangleSection swig_types[46]
+#define SWIGTYPE_p_TexGen__CSectionMeshRectangular swig_types[47]
+#define SWIGTYPE_p_TexGen__CSectionMeshTriangulate swig_types[48]
+#define SWIGTYPE_p_TexGen__CSectionPolygon swig_types[49]
+#define SWIGTYPE_p_TexGen__CSectionPowerEllipse swig_types[50]
+#define SWIGTYPE_p_TexGen__CSectionRectangle swig_types[51]
+#define SWIGTYPE_p_TexGen__CSectionRotated swig_types[52]
+#define SWIGTYPE_p_TexGen__CSectionScaled swig_types[53]
+#define SWIGTYPE_p_TexGen__CShearedPeriodicBoundaries swig_types[54]
+#define SWIGTYPE_p_TexGen__CShearedTextileWeave2D swig_types[55]
+#define SWIGTYPE_p_TexGen__CShearedVoxelMesh swig_types[56]
+#define SWIGTYPE_p_TexGen__CSimulation swig_types[57]
+#define SWIGTYPE_p_TexGen__CSimulationAbaqus swig_types[58]
+#define SWIGTYPE_p_TexGen__CSingletonT_TexGen__CTexGen_t swig_types[59]
+#define SWIGTYPE_p_TexGen__CSlaveNode swig_types[60]
+#define SWIGTYPE_p_TexGen__CStaggeredPeriodicBoundaries swig_types[61]
+#define SWIGTYPE_p_TexGen__CStaggeredVoxelMesh swig_types[62]
+#define SWIGTYPE_p_TexGen__CTetgenMesh swig_types[63]
+#define SWIGTYPE_p_TexGen__CTexGen swig_types[64]
+#define SWIGTYPE_p_TexGen__CTextile swig_types[65]
+#define SWIGTYPE_p_TexGen__CTextile3DWeave swig_types[66]
+#define SWIGTYPE_p_TexGen__CTextileAngleInterlock swig_types[67]
+#define SWIGTYPE_p_TexGen__CTextileDeformer swig_types[68]
+#define SWIGTYPE_p_TexGen__CTextileDeformerVolumeMesh swig_types[69]
+#define SWIGTYPE_p_TexGen__CTextileLayerToLayer swig_types[70]
+#define SWIGTYPE_p_TexGen__CTextileLayered swig_types[71]
+#define SWIGTYPE_p_TexGen__CTextileMaterials swig_types[72]
+#define SWIGTYPE_p_TexGen__CTextileOffsetAngleInterlock swig_types[73]
+#define SWIGTYPE_p_TexGen__CTextileOrthogonal swig_types[74]
+#define SWIGTYPE_p_TexGen__CTextileWeave swig_types[75]
+#define SWIGTYPE_p_TexGen__CTextileWeave2D swig_types[76]
+#define SWIGTYPE_p_TexGen__CTextileWeave3D swig_types[77]
+#define SWIGTYPE_p_TexGen__CUMAT swig_types[78]
+#define SWIGTYPE_p_TexGen__CVoxelMesh swig_types[79]
+#define SWIGTYPE_p_TexGen__CYarn swig_types[80]
+#define SWIGTYPE_p_TexGen__CYarnSection swig_types[81]
+#define SWIGTYPE_p_TexGen__CYarnSectionConstant swig_types[82]
+#define SWIGTYPE_p_TexGen__CYarnSectionInterp swig_types[83]
+#define SWIGTYPE_p_TexGen__CYarnSectionInterpNode swig_types[84]
+#define SWIGTYPE_p_TexGen__CYarnSectionInterpPosition swig_types[85]
+#define SWIGTYPE_p_TexGen__ELEMENT_INDICES swig_types[86]
+#define SWIGTYPE_p_TexGen__LessPairDoubleInt swig_types[87]
+#define SWIGTYPE_p_TexGen__LessPairDoubleXYZ swig_types[88]
+#define SWIGTYPE_p_TexGen__MESHER_ELEMENT_DATA swig_types[89]
+#define SWIGTYPE_p_TexGen__PLANE swig_types[90]
+#define SWIGTYPE_p_TexGen__PLANEPARAMS swig_types[91]
+#define SWIGTYPE_p_TexGen__POINT_INFO swig_types[92]
+#define SWIGTYPE_p_TexGen__WXYZ swig_types[93]
+#define SWIGTYPE_p_TexGen__XY swig_types[94]
+#define SWIGTYPE_p_TexGen__XYZ swig_types[95]
+#define SWIGTYPE_p_TexGen__YARNDATA swig_types[96]
+#define SWIGTYPE_p_TexGen__YARN_POSITION_INFORMATION swig_types[97]
+#define SWIGTYPE_p_TiXmlElement swig_types[98]
+#define SWIGTYPE_p_allocator_type swig_types[99]
+#define SWIGTYPE_p_bool swig_types[100]
+#define SWIGTYPE_p_char swig_types[101]
+#define SWIGTYPE_p_const_reference swig_types[102]
+#define SWIGTYPE_p_difference_type swig_types[103]
+#define SWIGTYPE_p_double swig_types[104]
+#define SWIGTYPE_p_f_std__string_bool__void swig_types[105]
+#define SWIGTYPE_p_first_type swig_types[106]
+#define SWIGTYPE_p_int swig_types[107]
+#define SWIGTYPE_p_key_type swig_types[108]
+#define SWIGTYPE_p_mapped_type swig_types[109]
+#define SWIGTYPE_p_ostream swig_types[110]
+#define SWIGTYPE_p_p_PyObject swig_types[111]
+#define SWIGTYPE_p_reference swig_types[112]
+#define SWIGTYPE_p_second_type swig_types[113]
+#define SWIGTYPE_p_setT_int_t swig_types[114]
+#define SWIGTYPE_p_size_type swig_types[115]
+#define SWIGTYPE_p_std__allocatorT_TexGen__CLinearTransformation_t swig_types[116]
+#define SWIGTYPE_p_std__allocatorT_TexGen__CMeshDataBase_p_t swig_types[117]
+#define SWIGTYPE_p_std__allocatorT_TexGen__CMesh_t swig_types[118]
+#define SWIGTYPE_p_std__allocatorT_TexGen__CNode_t swig_types[119]
+#define SWIGTYPE_p_std__allocatorT_TexGen__CSlaveNode_t swig_types[120]
+#define SWIGTYPE_p_std__allocatorT_TexGen__CTextile_p_t swig_types[121]
+#define SWIGTYPE_p_std__allocatorT_TexGen__CYarn_p_t swig_types[122]
+#define SWIGTYPE_p_std__allocatorT_TexGen__CYarn_t swig_types[123]
+#define SWIGTYPE_p_std__allocatorT_TexGen__MESHER_ELEMENT_DATA_t swig_types[124]
+#define SWIGTYPE_p_std__allocatorT_TexGen__PLANE_t swig_types[125]
+#define SWIGTYPE_p_std__allocatorT_TexGen__POINT_INFO_t swig_types[126]
+#define SWIGTYPE_p_std__allocatorT_TexGen__XYZ_t swig_types[127]
+#define SWIGTYPE_p_std__allocatorT_TexGen__XY_t swig_types[128]
+#define SWIGTYPE_p_std__allocatorT_bool_t swig_types[129]
+#define SWIGTYPE_p_std__allocatorT_double_t swig_types[130]
+#define SWIGTYPE_p_std__allocatorT_float_t swig_types[131]
+#define SWIGTYPE_p_std__allocatorT_int_t swig_types[132]
+#define SWIGTYPE_p_std__allocatorT_std__pairT_double_TexGen__XYZ_t_t swig_types[133]
+#define SWIGTYPE_p_std__allocatorT_std__pairT_int_int_t_t swig_types[134]
+#define SWIGTYPE_p_std__allocatorT_std__pairT_std__string_const_TexGen__CTextile_p_t_t swig_types[135]
+#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[136]
+#define SWIGTYPE_p_std__invalid_argument swig_types[137]
+#define SWIGTYPE_p_std__istream swig_types[138]
+#define SWIGTYPE_p_std__lessT_std__string_t swig_types[139]
+#define SWIGTYPE_p_std__listT_TexGen__CYarn_std__allocatorT_TexGen__CYarn_t_t swig_types[140]
+#define SWIGTYPE_p_std__listT_TexGen__MESHER_ELEMENT_DATA_std__allocatorT_TexGen__MESHER_ELEMENT_DATA_t_t swig_types[141]
+#define SWIGTYPE_p_std__listT__Tp__Alloc_t swig_types[142]
+#define SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t swig_types[143]
+#define SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__string_t_t_t swig_types[144]
+#define SWIGTYPE_p_std__mapT_std__string_TexGen__CTextile_p_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_TexGen__CTextile_p_t_t_t swig_types[145]
+#define SWIGTYPE_p_std__mapT_std__string_std__pairT_CObjectContainerT_TexGen__CMaterial_t_CObjectContainerT_TexGen__CMaterial_t_t_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__pairT_CObjectContainerT_TexGen__CMaterial_t_CObjectContainerT_TexGen__CMaterial_t_t_t_t_t swig_types[146]
+#define SWIGTYPE_p_std__ostream swig_types[147]
+#define SWIGTYPE_p_std__pairT_TexGen__XYZ_TexGen__XYZ_t swig_types[148]
+#define SWIGTYPE_p_std__pairT_bool_bool_t swig_types[149]
+#define SWIGTYPE_p_std__pairT_double_TexGen__XYZ_t swig_types[150]
+#define SWIGTYPE_p_std__pairT_double_int_t swig_types[151]
+#define SWIGTYPE_p_std__pairT_int_int_t swig_types[152]
+#define SWIGTYPE_p_std__pairT_std__vectorT_double_std__allocatorT_double_t_t_std__vectorT_double_std__allocatorT_double_t_t_t swig_types[153]
+#define SWIGTYPE_p_std__string swig_types[154]
+#define SWIGTYPE_p_std__vectorT_TexGen__CLinearTransformation_std__allocatorT_TexGen__CLinearTransformation_t_t swig_types[155]
+#define SWIGTYPE_p_std__vectorT_TexGen__CMeshDataBase_p_std__allocatorT_TexGen__CMeshDataBase_p_t_t swig_types[156]
+#define SWIGTYPE_p_std__vectorT_TexGen__CMesh_std__allocatorT_TexGen__CMesh_t_t swig_types[157]
+#define SWIGTYPE_p_std__vectorT_TexGen__CNode_std__allocatorT_TexGen__CNode_t_t swig_types[158]
+#define SWIGTYPE_p_std__vectorT_TexGen__CSlaveNode_std__allocatorT_TexGen__CSlaveNode_t_t swig_types[159]
+#define SWIGTYPE_p_std__vectorT_TexGen__CTextile_p_std__allocatorT_TexGen__CTextile_p_t_t swig_types[160]
+#define SWIGTYPE_p_std__vectorT_TexGen__CYarn_p_std__allocatorT_TexGen__CYarn_p_t_t swig_types[161]
+#define SWIGTYPE_p_std__vectorT_TexGen__CYarn_std__allocatorT_TexGen__CYarn_t_t swig_types[162]
+#define SWIGTYPE_p_std__vectorT_TexGen__ELEMENT_INDICES_std__allocatorT_TexGen__ELEMENT_INDICES_t_t swig_types[163]
+#define SWIGTYPE_p_std__vectorT_TexGen__PLANE_std__allocatorT_TexGen__PLANE_t_t swig_types[164]
+#define SWIGTYPE_p_std__vectorT_TexGen__POINT_INFO_std__allocatorT_TexGen__POINT_INFO_t_t swig_types[165]
+#define SWIGTYPE_p_std__vectorT_TexGen__XYZ_std__allocatorT_TexGen__XYZ_t_t swig_types[166]
+#define SWIGTYPE_p_std__vectorT_TexGen__XY_std__allocatorT_TexGen__XY_t_t swig_types[167]
+#define SWIGTYPE_p_std__vectorT__Tp__Alloc_t swig_types[168]
+#define SWIGTYPE_p_std__vectorT__Tp_p__Alloc_t swig_types[169]
+#define SWIGTYPE_p_std__vectorT_bool__Alloc_t swig_types[170]
+#define SWIGTYPE_p_std__vectorT_bool_std__allocatorT_bool_t_t swig_types[171]
+#define SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t swig_types[172]
+#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[173]
+#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[174]
+#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[175]
+#define SWIGTYPE_p_std__vectorT_std__pairT_double_TexGen__XYZ_t_std__allocatorT_std__pairT_double_TexGen__XYZ_t_t_t swig_types[176]
+#define SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t swig_types[177]
+#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[178]
+#define SWIGTYPE_p_std__vectorT_std__vectorT_int_p_std__allocatorT_int_p_t_t_std__allocatorT_std__vectorT_int_p_std__allocatorT_int_p_t_t_t_t swig_types[179]
+#define SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t swig_types[180]
+#define SWIGTYPE_p_swig__SwigPyIterator swig_types[181]
+#define SWIGTYPE_p_value_type swig_types[182]
+static swig_type_info *swig_types[184];
+static swig_module_info swig_module = {swig_types, 183, 0, 0, 0, 0};
 #define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
 #define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)
 
@@ -103509,37 +103331,6 @@ fail:
 }
 
 
-SWIGINTERN PyObject *_wrap_CTextile3DWeave_GetXYarnIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
-  PyObject *resultobj = 0;
-  TexGen::CTextile3DWeave *arg1 = (TexGen::CTextile3DWeave *) 0 ;
-  int arg2 ;
-  void *argp1 = 0 ;
-  int res1 = 0 ;
-  int val2 ;
-  int ecode2 = 0 ;
-  PyObject * obj0 = 0 ;
-  PyObject * obj1 = 0 ;
-  int result;
-  
-  if (!PyArg_ParseTuple(args,(char *)"OO:CTextile3DWeave_GetXYarnIndex",&obj0,&obj1)) SWIG_fail;
-  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TexGen__CTextile3DWeave, 0 |  0 );
-  if (!SWIG_IsOK(res1)) {
-    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CTextile3DWeave_GetXYarnIndex" "', argument " "1"" of type '" "TexGen::CTextile3DWeave *""'"); 
-  }
-  arg1 = reinterpret_cast< TexGen::CTextile3DWeave * >(argp1);
-  ecode2 = SWIG_AsVal_int(obj1, &val2);
-  if (!SWIG_IsOK(ecode2)) {
-    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CTextile3DWeave_GetXYarnIndex" "', argument " "2"" of type '" "int""'");
-  } 
-  arg2 = static_cast< int >(val2);
-  result = (int)(arg1)->GetXYarnIndex(arg2);
-  resultobj = SWIG_From_int(static_cast< int >(result));
-  return resultobj;
-fail:
-  return NULL;
-}
-
-
 SWIGINTERN PyObject *_wrap_CTextile3DWeave_FindNextCellIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
   PyObject *resultobj = 0;
   TexGen::CTextile3DWeave *arg1 = (TexGen::CTextile3DWeave *) 0 ;
@@ -132752,6 +132543,51 @@ SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_g_DomainAABB_set(PyObject *SWIGUNUSE
 }
 
 
+SWIGINTERN int Swig_var_COctreeVoxelMesh_materialInfo_set(PyObject *_val) {
+  {
+    void *argp = 0;
+    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t,  0  | 0);
+    if (!SWIG_IsOK(res)) {
+      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""TexGen::COctreeVoxelMesh::materialInfo""' of type '""std::vector< char >""'");
+    }
+    if (!argp) {
+      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""TexGen::COctreeVoxelMesh::materialInfo""' of type '""std::vector< char >""'");
+    } else {
+      std::vector< char > * temp;
+      temp  = reinterpret_cast< std::vector< char > * >(argp);
+      TexGen::COctreeVoxelMesh::materialInfo = *temp;
+      if (SWIG_IsNewObj(res)) delete temp;
+    }
+  }
+  return 0;
+fail:
+  return 1;
+}
+
+
+SWIGINTERN PyObject *Swig_var_COctreeVoxelMesh_materialInfo_get(void) {
+  PyObject *pyobj = 0;
+  
+  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&TexGen::COctreeVoxelMesh::materialInfo), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t,  0 );
+  return pyobj;
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_materialInfo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
+  return Swig_var_COctreeVoxelMesh_materialInfo_get();
+}
+
+
+SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_materialInfo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  int res;
+  PyObject *value;
+  
+  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
+  res = Swig_var_COctreeVoxelMesh_materialInfo_set(value);
+  return !res ? SWIG_Py_Void() : NULL;
+}
+
+
 SWIGINTERN PyObject *_wrap_COctreeVoxelMesh_SaveVoxelMesh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
   PyObject *resultobj = 0;
   TexGen::COctreeVoxelMesh *arg1 = (TexGen::COctreeVoxelMesh *) 0 ;
@@ -135273,7 +135109,6 @@ static PyMethodDef SwigMethods[] = {
 	 { (char *)"CTextile3DWeave_GetNumBinderLayers", _wrap_CTextile3DWeave_GetNumBinderLayers, METH_VARARGS, NULL},
 	 { (char *)"CTextile3DWeave_GetWarpYarnInfo", _wrap_CTextile3DWeave_GetWarpYarnInfo, METH_VARARGS, NULL},
 	 { (char *)"CTextile3DWeave_IsBinderYarn", _wrap_CTextile3DWeave_IsBinderYarn, METH_VARARGS, NULL},
-	 { (char *)"CTextile3DWeave_GetXYarnIndex", _wrap_CTextile3DWeave_GetXYarnIndex, METH_VARARGS, NULL},
 	 { (char *)"CTextile3DWeave_FindNextCellIndex", _wrap_CTextile3DWeave_FindNextCellIndex, METH_VARARGS, NULL},
 	 { (char *)"CTextile3DWeave_FindNextYCellIndex", _wrap_CTextile3DWeave_FindNextYCellIndex, METH_VARARGS, NULL},
 	 { (char *)"CTextile3DWeave_FindPrevYCellIndex", _wrap_CTextile3DWeave_FindPrevYCellIndex, METH_VARARGS, NULL},
@@ -135921,6 +135756,8 @@ static PyMethodDef SwigMethods[] = {
 	 { (char *)"COctreeVoxelMesh_gTextile_set", _wrap_COctreeVoxelMesh_gTextile_set, METH_VARARGS, NULL},
 	 { (char *)"COctreeVoxelMesh_g_DomainAABB_get", _wrap_COctreeVoxelMesh_g_DomainAABB_get, METH_VARARGS, NULL},
 	 { (char *)"COctreeVoxelMesh_g_DomainAABB_set", _wrap_COctreeVoxelMesh_g_DomainAABB_set, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_materialInfo_get", _wrap_COctreeVoxelMesh_materialInfo_get, METH_VARARGS, NULL},
+	 { (char *)"COctreeVoxelMesh_materialInfo_set", _wrap_COctreeVoxelMesh_materialInfo_set, METH_VARARGS, NULL},
 	 { (char *)"COctreeVoxelMesh_SaveVoxelMesh", _wrap_COctreeVoxelMesh_SaveVoxelMesh, METH_VARARGS, NULL},
 	 { (char *)"COctreeVoxelMesh_swigregister", COctreeVoxelMesh_swigregister, METH_VARARGS, NULL},
 	 { (char *)"delete_CPatternDraft", _wrap_delete_CPatternDraft, METH_VARARGS, NULL},
@@ -136060,12 +135897,12 @@ static void *_p_TexGen__CShearedVoxelMeshTo_p_TexGen__CVoxelMesh(void *x, int *S
 static void *_p_TexGen__CStaggeredVoxelMeshTo_p_TexGen__CVoxelMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
     return (void *)((TexGen::CVoxelMesh *) (TexGen::CRectangularVoxelMesh *) ((TexGen::CStaggeredVoxelMesh *) x));
 }
-static void *_p_TexGen__COctreeVoxelMeshTo_p_TexGen__CVoxelMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
-    return (void *)((TexGen::CVoxelMesh *)  ((TexGen::COctreeVoxelMesh *) x));
-}
 static void *_p_TexGen__CRotatedVoxelMeshTo_p_TexGen__CVoxelMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
     return (void *)((TexGen::CVoxelMesh *)  ((TexGen::CRotatedVoxelMesh *) x));
 }
+static void *_p_TexGen__COctreeVoxelMeshTo_p_TexGen__CVoxelMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
+    return (void *)((TexGen::CVoxelMesh *)  ((TexGen::COctreeVoxelMesh *) x));
+}
 static void *_p_TexGen__CFibreDistribution1DQuadTo_p_TexGen__CFibreDistribution(void *x, int *SWIGUNUSEDPARM(newmemory)) {
     return (void *)((TexGen::CFibreDistribution *)  ((TexGen::CFibreDistribution1DQuad *) x));
 }
@@ -136391,6 +136228,7 @@ static swig_type_info _swigt__p_std__vectorT__Tp__Alloc_t = {"_p_std__vectorT__T
 static swig_type_info _swigt__p_std__vectorT__Tp_p__Alloc_t = {"_p_std__vectorT__Tp_p__Alloc_t", "std::vector< _Tp *,_Alloc > *", 0, 0, (void*)0, 0};
 static swig_type_info _swigt__p_std__vectorT_bool__Alloc_t = {"_p_std__vectorT_bool__Alloc_t", "std::vector< bool,_Alloc > *", 0, 0, (void*)0, 0};
 static swig_type_info _swigt__p_std__vectorT_bool_std__allocatorT_bool_t_t = {"_p_std__vectorT_bool_std__allocatorT_bool_t_t", "std::vector< bool,std::allocator< bool > > *|std::vector< bool > *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_std__vectorT_char_std__allocatorT_char_t_t = {"_p_std__vectorT_char_std__allocatorT_char_t_t", "std::vector< char > *|std::vector< char,std::allocator< char > > *", 0, 0, (void*)0, 0};
 static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
 static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t = {"_p_std__vectorT_float_std__allocatorT_float_t_t", "std::vector< float > *|std::vector< float,std::allocator< float > > *", 0, 0, (void*)0, 0};
 static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< TexGen::PATTERN3D > *|std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)0, 0};
@@ -136575,6 +136413,7 @@ static swig_type_info *swig_type_initial[] = {
   &_swigt__p_std__vectorT__Tp_p__Alloc_t,
   &_swigt__p_std__vectorT_bool__Alloc_t,
   &_swigt__p_std__vectorT_bool_std__allocatorT_bool_t_t,
+  &_swigt__p_std__vectorT_char_std__allocatorT_char_t_t,
   &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
   &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t,
   &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
@@ -136666,8 +136505,7 @@ static swig_cast_info _swigc__p_TexGen__CTextileWeave[] = {  {&_swigt__p_TexGen_
 static swig_cast_info _swigc__p_TexGen__CTextileWeave2D[] = {  {&_swigt__p_TexGen__CTextileWeave2D, 0, 0, 0},  {&_swigt__p_TexGen__CShearedTextileWeave2D, _p_TexGen__CShearedTextileWeave2DTo_p_TexGen__CTextileWeave2D, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__CTextileWeave3D[] = {  {&_swigt__p_TexGen__CTextileWeave3D, 0, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__CUMAT[] = {  {&_swigt__p_TexGen__CUMAT, 0, 0, 0},{0, 0, 0, 0}};
-static swig_cast_info _swigc__p_TexGen__CVoxelMesh[] = {  {&_swigt__p_TexGen__CVoxelMesh, 0, 0, 0},  {&_swigt__p_TexGen__CRectangularVoxelMesh, _p_TexGen__CRectangularVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},  {&_swigt__p_TexGen__CStaggeredVoxelMesh, _p_TexGen__CStaggeredVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},  {&_swigt__p_TexGen__CShearedVoxelMesh, _p_TexGen__CShearedVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},  {&_swigt__p_TexGen__COctreeVoxelMesh, _p_TexGen__COctreeVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},{0, 0, 0, 0}};
-static swig_cast_info _swigc__p_TexGen__CVoxelMesh[] = {  {&_swigt__p_TexGen__CVoxelMesh, 0, 0, 0},  {&_swigt__p_TexGen__CRectangularVoxelMesh, _p_TexGen__CRectangularVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},  {&_swigt__p_TexGen__CStaggeredVoxelMesh, _p_TexGen__CStaggeredVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},  {&_swigt__p_TexGen__CShearedVoxelMesh, _p_TexGen__CShearedVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},  {&_swigt__p_TexGen__CRotatedVoxelMesh, _p_TexGen__CRotatedVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_TexGen__CVoxelMesh[] = {  {&_swigt__p_TexGen__CVoxelMesh, 0, 0, 0},  {&_swigt__p_TexGen__CRectangularVoxelMesh, _p_TexGen__CRectangularVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},  {&_swigt__p_TexGen__CStaggeredVoxelMesh, _p_TexGen__CStaggeredVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},  {&_swigt__p_TexGen__CShearedVoxelMesh, _p_TexGen__CShearedVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},  {&_swigt__p_TexGen__CRotatedVoxelMesh, _p_TexGen__CRotatedVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},  {&_swigt__p_TexGen__COctreeVoxelMesh, _p_TexGen__COctreeVoxelMeshTo_p_TexGen__CVoxelMesh, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__CYarn[] = {  {&_swigt__p_TexGen__CYarn, 0, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__CYarnSection[] = {  {&_swigt__p_TexGen__CYarnSectionInterp, _p_TexGen__CYarnSectionInterpTo_p_TexGen__CYarnSection, 0, 0},  {&_swigt__p_TexGen__CYarnSectionInterpPosition, _p_TexGen__CYarnSectionInterpPositionTo_p_TexGen__CYarnSection, 0, 0},  {&_swigt__p_TexGen__CYarnSectionConstant, _p_TexGen__CYarnSectionConstantTo_p_TexGen__CYarnSection, 0, 0},  {&_swigt__p_TexGen__CYarnSectionInterpNode, _p_TexGen__CYarnSectionInterpNodeTo_p_TexGen__CYarnSection, 0, 0},  {&_swigt__p_TexGen__CYarnSection, 0, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_TexGen__CYarnSectionConstant[] = {  {&_swigt__p_TexGen__CYarnSectionConstant, 0, 0, 0},{0, 0, 0, 0}};
@@ -136760,6 +136598,7 @@ static swig_cast_info _swigc__p_std__vectorT__Tp__Alloc_t[] = {  {&_swigt__p_std
 static swig_cast_info _swigc__p_std__vectorT__Tp_p__Alloc_t[] = {  {&_swigt__p_std__vectorT__Tp_p__Alloc_t, 0, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_std__vectorT_bool__Alloc_t[] = {  {&_swigt__p_std__vectorT_bool__Alloc_t, 0, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_std__vectorT_bool_std__allocatorT_bool_t_t[] = {  {&_swigt__p_std__vectorT_bool_std__allocatorT_bool_t_t, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_std__vectorT_char_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__vectorT_char_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t[] = {  {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
 static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
@@ -136944,6 +136783,7 @@ static swig_cast_info *swig_cast_initial[] = {
   _swigc__p_std__vectorT__Tp_p__Alloc_t,
   _swigc__p_std__vectorT_bool__Alloc_t,
   _swigc__p_std__vectorT_bool_std__allocatorT_bool_t_t,
+  _swigc__p_std__vectorT_char_std__allocatorT_char_t_t,
   _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
   _swigc__p_std__vectorT_float_std__allocatorT_float_t_t,
   _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
@@ -137696,6 +137536,7 @@ SWIG_init(void) {
   SWIG_addvarlink(SWIG_globals(),(char*)"COctreeVoxelMesh_FaceZ_max",Swig_var_COctreeVoxelMesh_FaceZ_max_get, Swig_var_COctreeVoxelMesh_FaceZ_max_set);
   SWIG_addvarlink(SWIG_globals(),(char*)"COctreeVoxelMesh_gTextile",Swig_var_COctreeVoxelMesh_gTextile_get, Swig_var_COctreeVoxelMesh_gTextile_set);
   SWIG_addvarlink(SWIG_globals(),(char*)"COctreeVoxelMesh_g_DomainAABB",Swig_var_COctreeVoxelMesh_g_DomainAABB_get, Swig_var_COctreeVoxelMesh_g_DomainAABB_set);
+  SWIG_addvarlink(SWIG_globals(),(char*)"COctreeVoxelMesh_materialInfo",Swig_var_COctreeVoxelMesh_materialInfo_get, Swig_var_COctreeVoxelMesh_materialInfo_set);
 #if PY_VERSION_HEX >= 0x03000000
   return m;
 #else
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -44,6 +44,7 @@ ENDIF(UNIX)
 
 FIND_PACKAGE(VTK REQUIRED)
 
+INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../../OctreeRefinement/Include)
 INCLUDE_DIRECTORIES(${VTK_INCLUDE_DIRS})
 
 # Note ${VTK_LIBRARY_DIRS} are necessary for MSVC++, libs arn't found otherwise
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -3,6 +3,7 @@ FILE(GLOB UNITTEST_HEADER_FILES *.h)
 
 INCLUDE(FindCppUnit.cmake)
 
+INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../../OctreeRefinement/Include)
 INCLUDE_DIRECTORIES(${CPPUNIT_INCLUDE_DIR})
 
 ADD_EXECUTABLE(TexGenUnitTests ${UNITTEST_SOURCE_FILES} ${UNITTEST_HEADER_FILES})
--- changelog.txt
+++ changelog.txt
@@ -1,5 +1,19 @@
 Version History
 ---------------
+v3.10.1
+=======
+Core
+====
+** Added functions to create voxel mesh and periodic boundary conditions for rotated domains
+
+GUI
+===
+** Added rotated boundary conditions option to Voxel Mesh Export
+
+UnitTests
+=========
+** Added rotated voxel mesh export test
+
 v3.10.0
 ======
 General
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -40,13 +40,13 @@ ADD_DEFINITIONS(-DEXPORT)
 
 IF(WIN32)
 TARGET_LINK_LIBRARIES(TexGenCore Triangle Octree TinyXML CSparse tetgenlib
-${CMAKE_CURRENT_SOURCE_DIR}/../../OctreeRefinement/libmylib_sc_w64
-${CMAKE_CURRENT_SOURCE_DIR}/../../OctreeRefinement/libmylib_w64)
+${CMAKE_CURRENT_SOURCE_DIR}/../OctreeRefinement/libmylib_sc_w64
+${CMAKE_CURRENT_SOURCE_DIR}/../OctreeRefinement/libmylib_w64)
 ELSE(WIN32)
 TARGET_LINK_LIBRARIES(TexGenCore Triangle Octree TinyXML CSparse tetgenlib)
 ENDIF(WIN32)
 
-INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../../OctreeRefinement/Include)
+INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../OctreeRefinement/Include)
 
 INCLUDE(../Python/FindPythonSitePackages.cmake)
 IF(WIN32)
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -1,7 +1,7 @@
 INCLUDE(FindOpenCascade.cmake)
 
 INCLUDE_DIRECTORIES(${OPENCASCADE_INCLUDE_DIR})
-INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../../OctreeRefinement/Include)
+INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../OctreeRefinement/Include)
 
 ADD_LIBRARY(TexGenExport STATIC
 Exporter.cpp
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -34,7 +34,7 @@ FIND_PACKAGE(wxWidgets REQUIRED)
 FIND_PACKAGE(SWIG REQUIRED)
 FIND_PACKAGE(PythonLibs REQUIRED)
 
-INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../../OctreeRefinement/Include)
+INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../OctreeRefinement/Include)
 INCLUDE_DIRECTORIES(${VTK_INCLUDE_DIRS} ${wxWidgets_INCLUDE_DIRS} ${PYTHON_INCLUDE_PATH})
 
 ADD_DEFINITIONS(${wxWidgets_DEFINITIONS})
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -10,7 +10,7 @@ IF(BUILD_PYTHON_INTERFACE)
 
 	# Set where to find the python header files
 	INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
-	INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../../OctreeRefinement/Include)
+	INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../OctreeRefinement/Include)
 
 	# Add the swig command to the build
 	ADD_CUSTOM_COMMAND(OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/Core_wrap.cxx"
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -44,7 +44,7 @@ ENDIF(UNIX)
 
 FIND_PACKAGE(VTK REQUIRED)
 
-INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../../OctreeRefinement/Include)
+INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../OctreeRefinement/Include)
 INCLUDE_DIRECTORIES(${VTK_INCLUDE_DIRS})
 
 # Note ${VTK_LIBRARY_DIRS} are necessary for MSVC++, libs arn't found otherwise
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -3,7 +3,7 @@ FILE(GLOB UNITTEST_HEADER_FILES *.h)
 
 INCLUDE(FindCppUnit.cmake)
 
-INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../../OctreeRefinement/Include)
+INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../OctreeRefinement/Include)
 INCLUDE_DIRECTORIES(${CPPUNIT_INCLUDE_DIR})
 
 ADD_EXECUTABLE(TexGenUnitTests ${UNITTEST_SOURCE_FILES} ${UNITTEST_HEADER_FILES})
--- texgen-64bit-bundle-Python27-2012.nsi
+++ texgen-64bit-bundle-Python27-2012.nsi
@@ -59,6 +59,9 @@ Section "TexGen (required)" ;No components page, name is not important
   File msvcp110.dll
   File ..\Docs\TexGen.chm
   File TexGenGUi.exe.manifest
+  File ..\OctreeRefinement\libmylib_sc_w64.dll
+  File ..\OctreeRefinement\libmylib_w64.dll
+  File ..\OctreeRefinement\zlib1.dll
 
   SetOutPath $INSTDIR\Python\libstd
 
--- texgen2012.nsi
+++ texgen2012.nsi
@@ -109,6 +109,9 @@ Section "TexGen (required)" ;No components page, name is not important
   File ..\Docs\TexGen.chm
   File TexGenGUi.exe.manifest
   File Python27_64bit\Python27.dll  ; Copy dll anyway in case subversion TexGen is compiled with doesn't match version already installed
+  File ..\OctreeRefinement\libmylib_sc_w64.dll
+  File ..\OctreeRefinement\libmylib_w64.dll
+  File ..\OctreeRefinement\zlib1.dll
 
 !insertmacro MUI_INSTALLOPTIONS_READ $PythonDir "PythonPage.ini" "Field 2" "State"
   ;Call CopyPythonDLLIfNeeded
